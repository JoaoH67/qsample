[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "examples/steane.html",
    "href": "examples/steane.html",
    "title": "Input = STIM",
    "section": "",
    "text": "import qsample as qs\nimport qiskit\nimport time\nimport stim\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport re\nfrom tqdm.notebook import tqdm\nimport random\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[12], line 1\n----&gt; 1 import qsample as qs\n      2 import qiskit\n      3 import time\n\nModuleNotFoundError: No module named 'qsample'\n\n\n\n\neft = qs.Circuit(noisy=True)\nsz_123 = qs.Circuit(noisy=True)\nmeas7 = qs.Circuit(noisy=False)\n\neft.from_stim_circuit(\"\"\"R 0 1 2 3 4 5 6 7\nH 0 1 3\n                        CNOT 0 4\n                        CNOT 1 2\n                        TICK\n                        CNOT 3 5\n                        TICK\n                        CNOT 0 6\n                        TICK\n                        CNOT 3 4\n                        TICK\n                        CNOT 1 5\n                        TICK\n                        CNOT 0 2\n                        TICK\n                        CNOT 5 6\n                        TICK\n                        CNOT 4 7\n                        TICK\n                        CNOT 2 7\n                        TICK\n                        CNOT 5 7\n                        M 7\"\"\")\n\nsz_123.from_stim_circuit(\"\"\"R 8\nCNOT 0 8\n                        TICK\n                        CNOT 1 8\n                        TICK\n                        CNOT 3 8\n                        TICK\n                        CNOT 6 8\n                            M 8\"\"\")\n\nmeas7.from_stim_circuit(\"\"\"M 0 1 2 3 4 5 6\"\"\")\n\n\n\n\n\nk1 = 0b0001111\nk2 = 0b1010101\nk3 = 0b0110011\nk12 = k1 ^ k2\nk23 = k2 ^ k3\nk13 = k1 ^ k3\nk123 = k12 ^ k3\nstabilizerGenerators = [k1, k2, k3]\nstabilizerSet = [0, k1, k2, k3, k12, k23, k13, k123]\n\ndef hamming2(x, y):\n    count, z = 0, x ^ y\n    while z:\n        count += 1\n        z &= z - 1\n    return count\n\nfails = []\ndef logErr(out):\n    global fails\n    c = np.array([hamming2(out, i) for i in stabilizerSet])\n    d = np.flatnonzero(c &lt;= 1)\n    e = np.array([hamming2(out ^ (0b1111111), i) for i in stabilizerSet])\n    f = np.flatnonzero(e &lt;= 1)\n    if len(d) != 0:\n        return False\n    elif len(f) != 0:\n        fails.append(out)\n        return True\n    if len(d) != 0 and len(f) != 0: \n        raise('-!-!-CANNOT BE TRUE-!-!-')\n\ndef flagged_z_look_up_table_1(z):\n    s = [z]\n\n    if s == [1]:\n        return True\n    else: \n        return False\n\nfunctions = {\"logErr\": logErr, \"lut\": flagged_z_look_up_table_1}\n\nsteane0 = qs.Protocol(check_functions=functions, fault_tolerant=True)\n\nsteane0.add_nodes_from(['ENC', 'Z2', 'meas'], circuits=[eft, sz_123, meas7])\nsteane0.add_node('X_COR', circuit=qs.Circuit(noisy=True).from_stim_circuit(\"\"\"X 6\"\"\"))\nsteane0.add_edge('START', 'ENC', check='True')\nsteane0.add_edge('ENC', 'meas', check='ENC[-1]==0')\nsteane0.add_edge('ENC', 'Z2', check='ENC[-1]==1')\nsteane0.add_edge('Z2', 'X_COR', check='lut(Z2[-1])')\nsteane0.add_edge('Z2', 'meas', check='not lut(Z2[-1])')\nsteane0.add_edge('X_COR', 'meas', check='True')\nsteane0.add_edge('meas', 'FAIL', check='logErr(meas[-1])')\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 eft = qs.Circuit(noisy=True)\n      2 sz_123 = qs.Circuit(noisy=True)\n      3 meas7 = qs.Circuit(noisy=False)\n\nNameError: name 'qs' is not defined\n\n\n\n\nerr_model = qs.noise.E1\nq = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.5]\nerr_params = {'q': q}\n\nbegin = time.time()\nstim_sam = qs.SubsetSampler(protocol=steane0, simulator=qs.StimSimulator,  p_max={'q': 0.1}, err_model=err_model, err_params=err_params, L=3)\nstim_sam.run(2000)\nend = time.time()\nstim_time = end-begin\n\nv2 = stim_sam.stats()[0]\nw2 = stim_sam.stats()[2]\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 err_model = qs.noise.E1\n      2 q = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.5]\n      3 err_params = {'q': q}\n\nNameError: name 'qs' is not defined\n\n\n\n\nInput = qsample\n\neft = qs.Circuit([  {\"init\": {0,1,2,4,3,5,6,7}},\n                    {\"H\": {0,1,3}},\n                    {\"CNOT\": {(0,4)}},\n                    {\"CNOT\": {(1,2)}},\n                    {\"CNOT\": {(3,5)}},\n                    {\"CNOT\": {(0,6)}},\n                    {\"CNOT\": {(3,4)}},\n                    {\"CNOT\": {(1,5)}},\n                    {\"CNOT\": {(0,2)}},\n                    {\"CNOT\": {(5,6)}},\n                    {\"CNOT\": {(4,7)}},\n                    {\"CNOT\": {(2,7)}},\n                    {\"CNOT\": {(5,7)}},\n                    {\"measure\": {7}} ])\n\nsz_123 = qs.Circuit([   {\"init\": {8}},\n                        {\"CNOT\": {(0,8)}},\n                        {\"CNOT\": {(1,8)}},\n                        {\"CNOT\": {(3,8)}},\n                        {\"CNOT\": {(6,8)}},\n                        {\"measure\": {8}}])\n\nmeas7 = qs.Circuit([ {\"measure\": {0,1,2,3,4,5,6}} ], noisy=False)\n\n\n\n\n\nk1 = 0b0001111\nk2 = 0b1010101\nk3 = 0b0110011\nk12 = k1 ^ k2\nk23 = k2 ^ k3\nk13 = k1 ^ k3\nk123 = k12 ^ k3\nstabilizerGenerators = [k1, k2, k3]\nstabilizerSet = [0, k1, k2, k3, k12, k23, k13, k123]\n\ndef hamming2(x, y):\n    count, z = 0, x ^ y\n    while z:\n        count += 1\n        z &= z - 1\n    return count\n\nfails = []\n\ndef logErr(out):\n    global fails\n    \n    c = np.array([hamming2(out, i) for i in stabilizerSet])\n    d = np.flatnonzero(c &lt;= 1)\n    e = np.array([hamming2(out ^ (0b1111111), i) for i in stabilizerSet])\n    f = np.flatnonzero(e &lt;= 1)\n    if len(d) != 0:\n        return False\n    elif len(f) != 0:\n        fails.append(out)\n        return True\n    if len(d) != 0 and len(f) != 0: \n        raise('-!-!-CANNOT BE TRUE-!-!-')\n\ndef flagged_z_look_up_table_1(z):\n    s = [z]\n\n    if s == [1]:\n        return True\n    else: \n        return False\n\nfunctions = {\"logErr\": logErr, \"lut\": flagged_z_look_up_table_1}\n\nsteane0 = qs.Protocol(check_functions=functions, fault_tolerant=True)\n\nsteane0.add_nodes_from(['ENC', 'Z2', 'meas'], circuits=[eft, sz_123, meas7])\nsteane0.add_node('X_COR', circuit=qs.Circuit([{'X': {6}}], noisy=True))\nsteane0.add_edge('START', 'ENC', check='True')\nsteane0.add_edge('ENC', 'meas', check='ENC[-1]==0')\nsteane0.add_edge('ENC', 'Z2', check='ENC[-1]==1')\nsteane0.add_edge('Z2', 'X_COR', check='lut(Z2[-1])')\nsteane0.add_edge('Z2', 'meas', check='not lut(Z2[-1])')\nsteane0.add_edge('X_COR', 'meas', check='True')\nsteane0.add_edge('meas', 'FAIL', check='logErr(meas[-1])')\n\n\nerr_model = qs.noise.E1\nq = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.5]\nerr_params = {'q': q}\n\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=steane0, simulator=qs.StabilizerSimulator,  p_max={'q': 0.1}, err_model=err_model, err_params=err_params, L=3)\nss_sam.run(2000)\nend = time.time()\nqsample_time = end-begin\n\nv1 = ss_sam.stats()[0]\nw1 = ss_sam.stats()[2]\n\n\n\n\n\n\nInput = QASM\n\neft = qs.Circuit().from_qasm_circuit(\"\"\"OPENQASM 2.0;\ninclude \"qelib1.inc\";\n\nqreg q[8];\ncreg c[1];\n\nh q[0];\nh q[1];\nh q[3];\n\ncx q[0], q[4];\ncx q[1], q[2];\ncx q[3], q[5];\ncx q[0], q[6];\ncx q[3], q[4];\ncx q[1], q[5];\ncx q[0], q[2];\ncx q[5], q[6];\ncx q[4], q[7];\ncx q[2], q[7];\ncx q[5], q[7];\n\nmeasure q[7] -&gt; c[0];\"\"\")\n\nsz_123 = qs.Circuit().from_qasm_circuit(\"\"\"OPENQASM 2.0;\ninclude \"qelib1.inc\";\n\nqreg q[9];\ncreg c[1];\n\n// Initialize qubit 8 (default is |0‚ü©)\n\n// Apply CNOT gates with control qubits 0,1,3,6 and target qubit 8\ncx q[0], q[8];\ncx q[1], q[8];\ncx q[3], q[8];\ncx q[6], q[8];\n\n// Measure qubit 8 into classical bit 0\nmeasure q[8] -&gt; c[0];\"\"\")\n\nmeas7 = qs.Circuit(noisy=False).from_qasm_circuit(\"\"\"OPENQASM 2.0;\ninclude \"qelib1.inc\";\n\nqreg q[7];\ncreg c[7];\n\nmeasure q[0] -&gt; c[0];\nmeasure q[1] -&gt; c[1];\nmeasure q[2] -&gt; c[2];\nmeasure q[3] -&gt; c[3];\nmeasure q[4] -&gt; c[4];\nmeasure q[5] -&gt; c[5];\nmeasure q[6] -&gt; c[6];\"\"\")\n\n\n\n\n\nk1 = 0b0001111\nk2 = 0b1010101\nk3 = 0b0110011\nk12 = k1 ^ k2\nk23 = k2 ^ k3\nk13 = k1 ^ k3\nk123 = k12 ^ k3\nstabilizerGenerators = [k1, k2, k3]\nstabilizerSet = [0, k1, k2, k3, k12, k23, k13, k123]\n\ndef hamming2(x, y):\n    count, z = 0, x ^ y\n    while z:\n        count += 1\n        z &= z - 1\n    return count\n\nfails = []\n\ndef logErr(out):\n    global fails\n    \n    c = np.array([hamming2(out, i) for i in stabilizerSet])\n    d = np.flatnonzero(c &lt;= 1)\n    e = np.array([hamming2(out ^ (0b1111111), i) for i in stabilizerSet])\n    f = np.flatnonzero(e &lt;= 1)\n    if len(d) != 0:\n        return False\n    elif len(f) != 0:\n        fails.append(out)\n        return True\n    if len(d) != 0 and len(f) != 0: \n        raise('-!-!-CANNOT BE TRUE-!-!-')\n\ndef flagged_z_look_up_table_1(z):\n    s = [z]\n\n    if s == [1]:\n        return True\n    else: \n        return False\n\nfunctions = {\"logErr\": logErr, \"lut\": flagged_z_look_up_table_1}\n\nsteane0 = qs.Protocol(check_functions=functions, fault_tolerant=True)\n\nsteane0.add_nodes_from(['ENC', 'Z2', 'meas'], circuits=[eft, sz_123, meas7])\nsteane0.add_node('X_COR', circuit=qs.Circuit().from_qasm_circuit(\"\"\"OPENQASM 2.0;\ninclude \"qelib1.inc\";\n\nqreg q[8];\nx q[6];\"\"\"))\nsteane0.add_edge('START', 'ENC', check='True')\nsteane0.add_edge('ENC', 'meas', check='ENC[-1]==0')\nsteane0.add_edge('ENC', 'Z2', check='ENC[-1]==1')\nsteane0.add_edge('Z2', 'X_COR', check='lut(Z2[-1])')\nsteane0.add_edge('Z2', 'meas', check='not lut(Z2[-1])')\nsteane0.add_edge('X_COR', 'meas', check='True')\nsteane0.add_edge('meas', 'FAIL', check='logErr(meas[-1])')\n\n\nerr_model = qs.noise.E1\nq = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.5]\nerr_params = {'q': q}\n\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=steane0, simulator=qs.StimSimulator,  p_max={'q': 0.1}, err_model=err_model, err_params=err_params, L=3)\nss_sam.run(2000)\nend = time.time()\nstim_time = end-begin\n\nv3 = ss_sam.stats()[0]\nw3 = ss_sam.stats()[2]\n\n\n\nInput = Qiskit\n\nq = qiskit.QuantumRegister(8)\nc = qiskit.ClassicalRegister(1)\neft = qiskit.QuantumCircuit(q, c)\n\neft.h(q[0])\neft.h(q[1])\neft.h(q[3])\n\n\neft.cx(q[0], q[4])\neft.cx(q[1], q[2])\neft.cx(q[3], q[5])\neft.cx(q[0], q[6])\neft.cx(q[3], q[4])\neft.cx(q[1], q[5])\neft.cx(q[0], q[2])\neft.cx(q[5], q[6])\neft.cx(q[4], q[7])\neft.cx(q[2], q[7])\neft.cx(q[5], q[7])\n\neft.measure(q[7], c[0])\n\neft = qs.Circuit().from_qiskit_circuit(eft)\n\n# ==========\n\nq = qiskit.QuantumRegister(7)\nc = qiskit.ClassicalRegister(7)\nmeas7 = qiskit.QuantumCircuit(q, c)\n\nmeas7.measure(q[0], c[0])\nmeas7.measure(q[1], c[1])\nmeas7.measure(q[2], c[2])\nmeas7.measure(q[3], c[3])\nmeas7.measure(q[4], c[4])\nmeas7.measure(q[5], c[5])\nmeas7.measure(q[6], c[6])\n\n\nmeas7 = qs.Circuit().from_qiskit_circuit(meas7)\n\n# =========\nq = qiskit.QuantumRegister(9)\nc = qiskit.ClassicalRegister(1)\nsz_123 = qiskit.QuantumCircuit(q, c)\n\nsz_123.cx(q[0], q[8])\nsz_123.cx(q[1], q[8])\nsz_123.cx(q[3], q[8])\nsz_123.cx(q[6], q[8])\nsz_123.measure(q[8], c[0])\n\n\nsz_123 = qs.Circuit().from_qiskit_circuit(sz_123)\n\n# ===========\n\n\n\n\n\n\nk1 = 0b0001111\nk2 = 0b1010101\nk3 = 0b0110011\nk12 = k1 ^ k2\nk23 = k2 ^ k3\nk13 = k1 ^ k3\nk123 = k12 ^ k3\nstabilizerGenerators = [k1, k2, k3]\nstabilizerSet = [0, k1, k2, k3, k12, k23, k13, k123]\n\ndef hamming2(x, y):\n    count, z = 0, x ^ y\n    while z:\n        count += 1\n        z &= z - 1\n    return count\n\nfails = []\n\ndef logErr(out):\n    global fails\n    \n    c = np.array([hamming2(out, i) for i in stabilizerSet])\n    d = np.flatnonzero(c &lt;= 1)\n    e = np.array([hamming2(out ^ (0b1111111), i) for i in stabilizerSet])\n    f = np.flatnonzero(e &lt;= 1)\n    if len(d) != 0:\n        return False\n    elif len(f) != 0:\n        fails.append(out)\n        return True\n    if len(d) != 0 and len(f) != 0: \n        raise('-!-!-CANNOT BE TRUE-!-!-')\n\ndef flagged_z_look_up_table_1(z):\n    s = [z]\n\n    if s == [1]:\n        return True\n    else: \n        return False\n\nfunctions = {\"logErr\": logErr, \"lut\": flagged_z_look_up_table_1}\n\nsteane0 = qs.Protocol(check_functions=functions, fault_tolerant=True)\n\nsteane0.add_nodes_from(['ENC', 'Z2', 'meas'], circuits=[eft, sz_123, meas7])\nsteane0.add_node('X_COR', circuit=qs.Circuit().from_qasm_circuit(\"\"\"OPENQASM 2.0;\ninclude \"qelib1.inc\";\n\nqreg q[8];\nx q[6];\"\"\"))\nsteane0.add_edge('START', 'ENC', check='True')\nsteane0.add_edge('ENC', 'meas', check='ENC[-1]==0')\nsteane0.add_edge('ENC', 'Z2', check='ENC[-1]==1')\nsteane0.add_edge('Z2', 'X_COR', check='lut(Z2[-1])')\nsteane0.add_edge('Z2', 'meas', check='not lut(Z2[-1])')\nsteane0.add_edge('X_COR', 'meas', check='True')\nsteane0.add_edge('meas', 'FAIL', check='logErr(meas[-1])')\n\n\nerr_model = qs.noise.E1\nq = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.5]\nerr_params = {'q': q}\n\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=steane0, simulator=qs.StimSimulator,  p_max={'q': 0.1}, err_model=err_model, err_params=err_params, L=3)\nss_sam.run(2000)\nend = time.time()\nstim_time = end-begin\n\nv4 = ss_sam.stats()[0]\nw4 = ss_sam.stats()[2]\n\n\nplt.plot(q, v1, label = \"Input = QSample\")\nplt.plot(q, w1)\nplt.plot(q, v2, label = \"Input = STIM\")\nplt.plot(q, w2)\nplt.plot(q, v3, label = \"Input = QASM\")\nplt.plot(q, w3)\nplt.plot(q, v4, label = \"Input = Qiskit\")\nplt.plot(q, w4)\n\nplt.xscale('log')\nplt.yscale('log')\nplt.legend()\n\nprint(qsample_time)\nprint(stim_time)",
    "crumbs": [
      "examples",
      "Input = STIM"
    ]
  },
  {
    "objectID": "examples/PyMatching.html",
    "href": "examples/PyMatching.html",
    "title": "Qsample",
    "section": "",
    "text": "import qsample as qs\nimport qiskit\nimport time\nimport stim\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport re\nfrom tqdm.notebook import tqdm\nimport pymatching\n\n/Users/jhfontes/miniforge3/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\n\nbasic = stim.Circuit(\"\"\"\nR 0 1\nX_ERROR(0.01) 0 1\nCNOT 0 1\nX_ERROR(0.01) 0 1\nM 0 1\nDETECTOR rec[-2] \nDETECTOR rec[-1]\nOBSERVABLE_INCLUDE(0) rec[-1] rec[-2]\n\"\"\")\n\ndem = basic.detector_error_model()\nprint(repr(dem))\n\nmatcher = pymatching.Matching.from_detector_error_model(dem)\nmatcher.decode([0,1])\n\nstim.DetectorErrorModel('''\n    error(0.01) D0 D1\n    error(0.01) D0 L0\n    error(0.0198) D1 L0\n''')\n\n\narray([1], dtype=uint8)\n\n\n\nbasic.diagram('timeline-svg')\n\n\n\n\n\n\n\n\n\nbasic = qs.Circuit(noisy=True).from_stim_circuit(\"\"\"\nR 0 1\nX_ERROR(0.01) 0 1\nCNOT 0 1\nX_ERROR(0.01) 0 1\nM 0 1\nDETECTOR rec[-2] \nDETECTOR rec[-1]\nOBSERVABLE_INCLUDE(0) rec[-1] rec[-2]\n\"\"\")\n\ncorr = qs.Circuit(noisy=False).from_stim_circuit(\"\"\"X 0\"\"\")\nmeas = qs.Circuit(noisy=False).from_stim_circuit(\"\"\"M 0 1\"\"\")\n\n    \ndef decoder(out):\n    result = matcher.decode([out//2, out%2])\n    return result\n\nfunctions = {'decoder': decoder}\nprotocol = qs.Protocol(check_functions=functions)\n\n\nn_rounds = 4\nprotocol.add_nodes_from(['basic', 'corr', 'meas'], circuits=[basic, corr, meas])\nprotocol.add_edge('START', 'basic', check='True')\nprotocol.add_edge('basic', 'corr', check='decoder(basic[-1])')\nprotocol.add_edge('basic', 'meas', check='not decoder(basic[-1])')\nprotocol.add_edge('corr', 'meas', check='True')\nprotocol.add_edge('meas', 'FAIL', check='meas[-1]==0 or meas[-1]==3')\n\nprotocol.draw(figsize=(16,10))\n\n\n\n\n\n\n\n\n\nerr_model = qs.noise.E1\nq = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1]\nerr_params = {'q': q}\n\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=protocol, simulator=qs.StimSimulator,  p_max={'q': 0.01}, err_model=err_model, err_params=err_params, L=2)\nss_sam.run(100)\nend = time.time()\nqsample_time = end-begin\n\nv1 = ss_sam.stats()[0]\nw1 = ss_sam.stats()[2]\n\nplt.plot(q, v1)\nplt.plot(q, w1)\nplt.xscale('log')\nprint('time:', qsample_time, 's')\n\np=('1.00e-02',): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00&lt;00:00, 962.39it/s]\n\n\ntime: 0.1264810562133789 s",
    "crumbs": [
      "examples",
      "PyMatching.html"
    ]
  },
  {
    "objectID": "examples/GHZ.html",
    "href": "examples/GHZ.html",
    "title": "Qsample",
    "section": "",
    "text": "import qsample as qs\nimport time\nimport stim\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport re\n\n\n\nghz = qs.Circuit([ {\"init\": {0,1,2,3,4}},\n                   {\"H\": {0}},\n                   {\"CNOT\": {(0,1)}},\n                   {\"CNOT\": {(1,2)}},\n                   {\"CNOT\": {(2,3)}},\n                   {\"CNOT\": {(3,4)}},\n                   {\"CNOT\": {(0,4)}},\n                   {\"measure\": {4}}   ])\n\n# Define protocol for 1 round of repetition\n\ndef logErr(msmt_list):\n    return msmt_list[-1] == 1 # If True transition to FAIL\n\nfunctions = {'logErr': logErr}\n\nghz1 = qs.Protocol(check_functions=functions, fault_tolerant=False)\n\nghz1.add_node('ghz', circuit=ghz) # Add node with corresponding circuit\nghz1.add_edge('START', 'ghz', check='True') # Transition START -&gt; first circuit node always True\nghz1.add_edge('ghz', 'FAIL', check='logErr(ghz)')\n\n\nghz1.draw(figsize=(8,5))\n\n\n\n\n\n\n\n\n\nerr_model = qs.noise.E1\nq = [1e-5, 1e-3, 1e-1, 0.5]\nerr_params = {'q': q}\n\n\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=ghz1, simulator=qs.StabilizerSimulator,  p_max={'q': 0.1}, err_model=err_model, err_params=err_params, L=3)\nss_sam.run(1000)\nend = time.time()\nqsample_time = end-begin\n\n\n\n\n\nqsample_times = []\nstim_times = []\n\nsamples = [100, 300, 1000, 3000, 10000, 50000]\n\nfor s in samples:\n    begin = time.time()\n    ss_sam = qs.SubsetSampler(protocol=ghz1, simulator=qs.StabilizerSimulator,  p_max={'q': 0.01}, err_model=err_model, err_params=err_params, L=3)\n    ss_sam.run(s)\n    end = time.time()\n    qsample_times.append(end-begin)\n\n    begin = time.time()\n    ss_sam = qs.SubsetSampler(protocol=ghz1, simulator=qs.StimSimulator,  p_max={'q': 0.01}, err_model=err_model, err_params=err_params, L=3)\n    ss_sam.run(s)\n    end = time.time()\n    stim_times.append(end-begin)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot(samples, qsample_times, label = 'stabilizer sim.')\nplt.plot(samples, stim_times, label = 'stim sim.')\nplt.legend()\nplt.xscale('log')\nplt.yscale('log')\nplt.ylabel('time (s)')\nplt.xlabel('# of samples')\n\nprint('Average ratio of stim time/stabilizer time: {:.2f}'.format(np.average(np.array(stim_times)/np.array(qsample_times))))\n\nAverage ratio of stim time/stabilizer time: 0.83",
    "crumbs": [
      "examples",
      "GHZ.html"
    ]
  },
  {
    "objectID": "examples/teleportation.html",
    "href": "examples/teleportation.html",
    "title": "QSample",
    "section": "",
    "text": "import qsample as qs\nimport time\nimport stim\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport re\nteleport = qs.Circuit([{\"init\": {0, 1, 2}},\n                       {\"H\": {1}},\n                       {\"CNOT\": {(1, 2)}},\n                       {\"CNOT\": {(0, 1)}},\n                       {\"H\": {0}},\n                       {\"measure\": {0, 1}}])\nmeas = qs.Circuit([{\"measure\": {2}}], noisy=False)\ndef lut(syn):\n    op = {0: 'I', 1: 'X', 2: 'Z', 3: 'Y'}[syn]\n    return qs.Circuit([{op: {2}}], noisy=False)\ntele_proto = qs.Protocol(check_functions={'lut': lut})\ntele_proto.add_nodes_from(['tele', 'meas'], circuits=[teleport, meas])\ntele_proto.add_edge('START', 'tele', check='True')\ntele_proto.add_edge('tele', 'COR', check='lut(tele[-1])')\ntele_proto.add_edge('COR', 'meas', check='True')\ntele_proto.add_edge('meas', 'FAIL', check='meas[-1] == 1')\n\ntele_proto.draw(figsize=(8,5))\nerr_model = qs.noise.E1\nq = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.5]\nerr_params = {'q': q}\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=tele_proto, simulator=qs.StabilizerSimulator,  p_max={'q': 0.1}, err_model=err_model, err_params=err_params, L=3)\nss_sam.run(1000)\nend = time.time()\nqsample_time = end-begin\nv1 = ss_sam.stats()[0]",
    "crumbs": [
      "examples",
      "QSample"
    ]
  },
  {
    "objectID": "examples/teleportation.html#section-7",
    "href": "examples/teleportation.html#section-7",
    "title": "QSample",
    "section": "",
    "text": "teleport_s = qs.Circuit(\"\"\"H 1\\nCNOT 1 2\\nCNOT 0 1\\nH 0\\nM 0 1\\n\"\"\")\n\nmeas = qs.Circuit(\"\"\"M 2\"\"\", noisy=False)\n\n\ndef lut(syn):\n    op = {0: 'I', 1: 'X', 2: 'Z', 3: 'Y'}[syn]\n    return qs.Circuit(\"\\n{} 2\\n\".format(op), noisy=False)\n\n\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=tele_proto, simulator=qs.StimSimulator, p_max={'q': 0.1}, err_model=err_model, err_params=err_params, L=3)\nss_sam.run(1000)\nend = time.time()\nstim_time = end-begin\n\n\n\n\n\nv2 = ss_sam.stats()[0]\n\n\nplt.plot(q, v1)\nplt.plot(q, v2)\nplt.xscale('log')\nplt.yscale('log')\n\nprint(qsample_time)\nprint(stim_time)\n\n0.44299817085266113\n1.1689352989196777\n\n\n\n\n\n\n\n\n\n\nqsample_times = []\nstim_times = []\n\nsamples = [100, 300, 1000, 3000, 10000, 50000]\n\nfor s in samples:\n    begin = time.time()\n    ss_sam = qs.SubsetSampler(protocol=tele_proto, simulator=qs.StabilizerSimulator,  p_max={'q': 0.01}, err_model=err_model, err_params=err_params, L=3)\n    ss_sam.run(s)\n    end = time.time()\n    qsample_times.append(end-begin)\n\n    begin = time.time()\n    ss_sam = qs.SubsetSampler(protocol=tele_proto, simulator=qs.StimSimulator,  p_max={'q': 0.01}, err_model=err_model, err_params=err_params, L=3)\n    ss_sam.run(s)\n    end = time.time()\n    stim_times.append(end-begin)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.plot(samples, qsample_times, label = 'stabilizer sim.')\nplt.plot(samples, stim_times, label = 'stim sim.')\nplt.legend()\nplt.xscale('log')\nplt.yscale('log')\nplt.ylabel('time (s)')\nplt.xlabel('# of samples')\n\nprint('Average ratio of stim time/stabilizer time: {:.2f}'.format(np.average(np.array(stim_times)/np.array(qsample_times))))\n\nAverage ratio of stim time/stabilizer time: 0.84",
    "crumbs": [
      "examples",
      "QSample"
    ]
  },
  {
    "objectID": "examples/surface_code.html",
    "href": "examples/surface_code.html",
    "title": "Surface code: any distance",
    "section": "",
    "text": "#export\nimport qsample as qs\nimport qiskit\nimport time\nimport stim\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport re\nfrom tqdm.notebook import tqdm\nimport pymatching\n\n/Users/jhfontes/miniforge3/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\ndistance = 3\nmeas_array = np.arange(distance)*(2*distance+1)+1\nmeas_str=\"\"\nfor m in meas_array:\n    meas_str+=\" \"\n    meas_str+=str(m)\n\ncircuit = stim.Circuit.generated(\"surface_code:rotated_memory_x\", rounds=1, distance=distance, after_clifford_depolarization=0.05,\n    after_reset_flip_probability=0.001,\n    before_measure_flip_probability=0.001,\n    before_round_data_depolarization=0.001,)\nsurface_code = qs.Circuit(noisy=True).from_stim_circuit(circuit)\n\nmatching = pymatching.Matching(surface_code.dem)\nnum_detectors = matching.num_detectors\ndetector_array = surface_code.detector_array\n\n\ncorr = qs.Circuit(noisy=False).from_stim_circuit(\"\"\"X\"\"\"+meas_str)\nmeas = qs.Circuit(noisy=False).from_stim_circuit(\"\"\"M\"\"\"+meas_str)\n\nround_ = 0\ndef reset_count():\n    global round_\n    round_=0\n    return True\n\ndef increase_count():\n    global round_\n    round_+=1\n    return round_\n\ndef count():\n    global round_\n    return round_\n\ndef int2meas(out):\n    result = []\n    for i in np.arange(surface_code.n_measurements)[::-1]:\n        result.append(out//(2**int(i)))\n        out-=result[-1]*2**int(i)\n    return result\n\ndef measurement2detector(out, detector_array):\n    out = int2meas(out[-1])\n    detection_events = np.zeros(num_detectors)\n    for ii in range(num_detectors):\n        event = 0\n        for jj in detector_array[ii]:\n            event^=int(out[jj])\n        detection_events[ii]=event\n    return detection_events\n    \ndef decoder(out):\n    detection_events = measurement2detector(out, detector_array)\n    result = matching.decode(detection_events)\n    return result\n\ndef logErr(out):\n    meas_1 = 0\n    for i in range(distance):\n        j = (out[0]&gt;=(2**(distance-1-i)))\n        meas_1+=j\n        out[0]-=2**(distance-1-i)*j\n    return meas_1%2\n\nfunctions = {'decoder': decoder, 'matching':matching, 'logErr':logErr,\n            'reset_count': reset_count, 'count': count, 'increase_count': increase_count}\nsurface = qs.Protocol(check_functions=functions)\n\n\nn_rounds = 1\nsurface.add_nodes_from(['SC', 'corr', 'meas'], circuits=[surface_code, corr, meas])\nsurface.add_node('Round_counter', circuit=qs.Circuit([{\"I\": {0}}],noisy=False))\nsurface.add_edge('START', 'Round_counter', check='reset_count()')\nsurface.add_edge('Round_counter', 'SC', check='increase_count()')\nsurface.add_edge('SC', 'corr', check='decoder(SC)')\nsurface.add_edge('SC', 'Round_counter', check=f'(not decoder(SC)) and count()&lt;{n_rounds}')\nsurface.add_edge('SC', 'meas', check=f'(not decoder(SC)) and count()=={n_rounds}')\nsurface.add_edge('corr', 'Round_counter', check=f'count()&lt;{n_rounds}')\nsurface.add_edge('corr', 'meas', check=f'count()=={n_rounds}')\nsurface.add_edge('meas', 'FAIL', check='logErr(meas)')\n\nsurface.draw(figsize=(16,12))\n\n\n\n\n\n\n\n\n\nerr_model = qs.noise.E1\nq = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1]\nerr_params = {'q': q}\n\nbegin = time.time()\nss_sam = qs.SubsetSampler(protocol=surface, simulator=qs.StimSimulator,  p_max={'q': 0.01}, err_model=err_model, err_params=err_params, L=5)\nss_sam.run(10000)\nend = time.time()\nqsample_time = end-begin\n\nstats = ss_sam.stats()\n\nplt.errorbar(q, stats[0], stats[1])\nplt.errorbar(q, stats[2], stats[3])\nplt.xscale('log')\nplt.yscale('log')\nprint('time:', qsample_time, 's')\n\np=('1.00e-02',): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 10000/10000 [00:03&lt;00:00, 2938.23it/s]\n/Users/jhfontes/qsample/qsample/sampler/subset.py:92: RuntimeWarning: invalid value encountered in sqrt\n  return np.broadcast_arrays(p_L, np.sqrt(var), p_L+delta, np.sqrt(var_up))\n\n\ntime: 3.4151651859283447 s",
    "crumbs": [
      "examples",
      "Surface code: any distance"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "qsample",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "qsample"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "qsample",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall qsample in Development mode\n# make sure qsample package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to qsample\n$ nbdev_prepare",
    "crumbs": [
      "qsample"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "qsample",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/JoaoH67/qsample.git\nor from conda\n$ conda install -c JoaoH67 qsample\nor from pypi\n$ pip install qsample\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository‚Äôs pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "qsample"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "qsample",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don‚Äôt forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "qsample"
    ]
  }
]
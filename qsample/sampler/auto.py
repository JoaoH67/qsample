# AUTOGENERATED! DO NOT EDIT! File to edit: 06e_sampler.auto.ipynb (unless otherwise specified).

__all__ = ['SamplerSwitch', 'AutoSampler']

# Cell
from .direct import DirectSampler
from .subset import SubsetSampler
from ..callbacks import Callback
import numpy as np

# Cell
class SamplerSwitch(Callback):

    def __init__(self, period):
        self.period = period

    def on_sampler_begin(self, sampler):
        self.n_calls = 0

    def on_protocol_end(self, sampler):
        self.n_calls += 1
        if self.n_calls % self.period == 0:
            tree = sampler.trees[sampler.tree_idx]
            dvar = tree.direct_variance
            var = tree.variance
            delta = tree.delta
            # delta_var = tree.norm_variance
            print(dvar, var, delta, dvar > var + delta)
            # if dvar > var + delta:
                # sampler.stop_sampling = True

# Cell

class AutoSampler:

    def __init__(self, *args, **kwargs):
        self.samplers = [DirectSampler(*args, **kwargs)]

    def run(self, n_samples, callbacks=[]):
        self.samplers[0].run(n_samples, callbacks + []) # how to handle callbacks (plot) correctly?
        if self.sampler.stop_sampling:
            s = self.samplers[0]
            pmax = dict(zip(s.err_model.groups ,s.tree_idx))
            self.samplers.append(SubsetSampler(s.protocol, s.simulator, pmax=pmax, err_model=s.err_model))
            self.samplers[-1].run(n_samples, callbacks)
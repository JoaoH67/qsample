# AUTOGENERATED! DO NOT EDIT! File to edit: 05_fault_generators.ipynb (unless otherwise specified).

__all__ = ['Depolar', 'ONE_QUBIT_FAULTS', 'TWO_QUBIT_FAULTS']

# Cell
from .circuit import Circuit
import numpy as np
import itertools as it

# Cell

ONE_QUBIT_FAULTS = ["X", "Y", "Z"]
TWO_QUBIT_FAULTS = list(it.product(ONE_QUBIT_FAULTS + ["I"], repeat=2))
TWO_QUBIT_FAULTS.remove(("I","I"))

class Depolar:
    """Fault circuit generator under depolarizing circuit-level noise"""

    def __init__(self, choose_fn, n_ticks):
        self.n_ticks = n_ticks
        self.choose = choose_fn

    def generate(self, partitions, p_phys):
        fault_circuit = Circuit([dict()] * self.n_ticks)
        for faults in [self.choose(p,p_phy) for p,p_phy in zip(partitions,p_phys)]:
            for (tick_index, qubit) in faults:
                if type(qubit) == int:
                    f_gate = np.random.choice(ONE_QUBIT_FAULTS)
                    default = fault_circuit[tick_index].get(f_gate, {})
                    fault_circuit[tick][f_gate] = default.add(qubit)
                elif type(qubit) == tuple:
                    f_gates = TWO_QUBIT_FAULTS[np.random.choice(len(TWO_QUBIT_FAULTS))]
                    for f_gate, qubit_i in zip(f_gates, qubit):
                        if f_gate != "I":
                            default = fault_circuit[tick_index].get(f_gate, {})
                            fault_circuit[tick][f_gate] = default.add(qubit_i)
        return fault_circuit
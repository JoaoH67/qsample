# AUTOGENERATED! DO NOT EDIT! File to edit: 04_fault_generators.ipynb (unless otherwise specified).

__all__ = ['Depolar', 'ONE_QUBIT_FAULTS', 'TWO_QUBIT_FAULTS']

# Cell
from .circuit import Circuit
import numpy as np
import itertools as it

# Cell

ONE_QUBIT_FAULTS = ["X", "Y", "Z"]
TWO_QUBIT_FAULTS = list(it.product(ONE_QUBIT_FAULTS + ["I"], repeat=2))
TWO_QUBIT_FAULTS.remove(("I","I"))

class Depolar:
    """Fault circuit generator under depolarizing circuit-level noise"""

    def __init__(self, n_ticks):
        self.n_ticks = n_ticks

    def generate(self, partitions, params, sampler_type):

        if sampler_type == "DirectSampler":
            faults = [fault for partition, p in zip(partitions, params) for fault in partition if np.random.random() < p ]
        elif sampler_type == "SubsetSampler":
            faults = [partition[idx] for partition, weight in zip(partitions,params) for idx in np.random.choice(len(partition),weight,replace=False)]
        else:
            raise Exception(f"Sampler type {sampler_type} not implemented")

        return self._place_faults(faults)

    def _place_faults(self, faults):
        """Place `faults` at specified `tick_index`s in empty circuit"""

        fault_circuit = Circuit([{} for _ in range(self.n_ticks)])

        for (tick_index, qubit) in faults:
            if type(qubit) == int:
                f_gate = np.random.choice(ONE_QUBIT_FAULTS)
                qb_set = fault_circuit[tick_index].get(f_gate, set())
                qb_set.add(qubit)
                fault_circuit[tick_index][f_gate] = qb_set
            elif type(qubit) == tuple:
                f_gates = TWO_QUBIT_FAULTS[np.random.choice(len(TWO_QUBIT_FAULTS))]
                for f_gate, qubit_i in zip(f_gates, qubit):
                    if f_gate != "I":
                        qb_set = fault_circuit[tick_index].get(f_gate, set())
                        qb_set.add(qubit_i)
                        fault_circuit[tick_index][f_gate] = qb_set
        return fault_circuit
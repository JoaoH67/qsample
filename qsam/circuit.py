# AUTOGENERATED! DO NOT EDIT! File to edit: 02_circuit.ipynb (unless otherwise specified).

__all__ = ['Circuit']

# Cell
from .nbtools import patch
from collections.abc import MutableSequence
from .circtools import unpack

# Cell
class Circuit(MutableSequence):
    """Representation of a quantum circuit"""

    def __init__(self, ticks=None):
        self._ticks = ticks if ticks else []

    def __getitem__(self, tick_index):
        return self._ticks[tick_index]

    def __setitem__(self, tick_index, tick):
        self._ticks[tick_index] = tick

    def __delitem__(self, tick_index):
        del self._ticks[tick_index]

    def __len__(self):
        return len(self._ticks)

    def insert(self, tick_index, tick):
        self._ticks.insert(tick_index, tick)

    def __str__(self):
        str_list = []
        for i, tick in enumerate(self._ticks):
            str_list.append(f"{i}: {str(tick)}")
        return "\n".join(str_list)

    def __repr__(self):
        return self.__str__()

    @property
    def _qubits(self):
        """Set of qubits used in circuit"""
        return set(unpack(self._ticks))

    @property
    def n_qubits(self):
        """Number of qubits used in circuit"""
        return len(self._qubits)

    @property
    def n_ticks(self):
        """Number of ticks"""
        return len(self._ticks)
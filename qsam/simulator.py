# AUTOGENERATED! DO NOT EDIT! File to edit: 01_simulator.ipynb (unless otherwise specified).

__all__ = ['Simulator', 'run']

# Cell
from .tools import patch

# Cell
class Simulator:
    """Interface for quantum state simulation"""
    def __init__(self, num_qubits):
        self.n_qubits = num_qubits

# Cell
@patch(Simulator)
def _apply_gate(self, gate_symbol, qubits):
    """Apply a gate to the `qubits` of the current state."""
    gate = getattr(self, gate_symbol.lower())
    args = (qubits,) if type(qubits)==int else qubits
    return gate(*args)

# Cell
@patch(Simulator)
def run(self, circuit, fault_circuit=None):
    """Apply gates in `circuit` sequentially to current state.
    If `fault_circuit` is specified apply fault gates after each tick."""
    measurements = []
    for tick_index, tick in enumerate(circuit):
        if type(tick) == list:
            for sub_tick in tick:
                res = self._apply_gate(*sub_tick)
                if res: measurements.append( (tick_index,res) )
        elif type(tick) == tuple:
            res = self._apply_gate(*tick)
            if res: measurements.append( (tick_index,res) )

        if fault_circuit:
            fault_tick = fault_circuit[tick_index]
            if fault_tick:
                if type(fault_tick) == list:
                    for sub_fault_tick in fault_tick:
                        self._apply_gate(*sub_fault_tick)
                elif type(fault_tick) == tuple:
                    self._apply_gate(*fault_tick)
    return measurements
# AUTOGENERATED! DO NOT EDIT! File to edit: 05b_sampler.direct_sampler.ipynb (unless otherwise specified).

__all__ = ['DirectSampler']

# Cell
import qsam.math as math
from .base_sampler import BaseSampler
from ..protocol import iterate
from ..callbacks import CallbackList

import numpy as np
from tqdm.auto import tqdm # automatically choose jupyter tqdm version when available.

# Cell
class DirectSampler(BaseSampler):

    def setup(self):
        n_p_phy = self.fault_gen.p_phy
        self.cnts = np.zeros( len(n_p_phy) )
        self.fail_cnts = np.zeros( len(n_p_phy) )

    def stats(self, p_idx=..., var_fn=math.Wilson_var):
        rate = self.fail_cnts[p_idx] / self.cnts[p_idx]
        var = var_fn(rate, self.cnts[p_idx])
        return rate, np.sqrt(var)

    def run(self, n_samples, callbacks=[], verbose=False):

        if not isinstance(callbacks, CallbackList):
            callbacks = CallbackList(sampler=self, callbacks=callbacks)
        callbacks.on_sampler_begin()

        for i, p_phy in enumerate(tqdm(self.fault_gen.p_phy, desc='Total')):
            self.stop_sampling = False
            self.p_idx = i

            for _ in tqdm(range(n_samples), desc=f'p_phy={",".join(list(f"{p:.2E}" for p in p_phy))}', leave=True):

                callbacks.on_sample_begin()

                sim = self.simulator(self.n_qubits)
                p_it = iterate(self.protocol)
                node = next(p_it)
                self.cnts[i] += 1

                while node:

                    if not self.protocol.out_edges(node):
                        self.fail_cnts[i] += 1
                        break

                    circuit_hash, circuit = self.protocol.circuit_from_node(node)
                    if not circuit._noisy or circuit_hash not in self.protocol._circuits.keys():
                        msmt = sim.run(circuit)
                    else:
                        faults = self.fault_gen.faults_from_probs(p_phy, circuit_hash)
                        fault_circuit = self.fault_gen.gen_circuit(len(circuit), faults)
                        msmt = sim.run(circuit, fault_circuit)
                    _node = node
                    node = p_it.send(msmt)

                    if verbose: self._verbose(locals())

                callbacks.on_sample_end()
                if self.stop_sampling: break

        callbacks.on_sampler_end()
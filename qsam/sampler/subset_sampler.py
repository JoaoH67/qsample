# AUTOGENERATED! DO NOT EDIT! File to edit: 05d_sampler.subset_sampler.ipynb (unless otherwise specified).

__all__ = ['circuit_partitions', 'protocol_partitions', 'circuit_weight_vectors', 'protocol_weight_vectors',
           'circuit_subset_occurence', 'protocol_subset_occurence', 'w_plus1_filter', 'random_sel', 'ERV_sel',
           'SubsetSampler']

# Cell
import qsam.math as math
from .base_sampler import BaseSampler
from ..protocol import iterate
from ..callbacks import CallbackList
from .sample_tree import SampleTree
from ..fault_generators import to_ndarray

import numpy as np
import itertools as it
from tqdm.auto import tqdm # automatically choose jupyter tqdm version when available.

# Cell
def circuit_partitions(circ, partition_names):
    return [partition(circ, GATE_GROUPS[name]) for name in partition_names]

def protocol_partitions(circuits_dict, partition_names):
    return {c_hash: circuit_partitions(circ, partition_names)
           for c_hash, circ in circuits_dict.items() if circ._noisy}

# Cell
def circuit_weight_vectors(w_max, w_exclude={}):
    w_exclude = set((w,) if isinstance(w, int) else w for w in w_exclude)
    w_maxs = [w_max] if isinstance(w_max, int) else w_max

    w_upto_w_maxs = [tuple(range(w_max+1)) for w_max in w_maxs]
    w_vecs = list(it.product( *w_upto_w_maxs ))
    filtered_w_vecs = [w for w in w_vecs if w not in w_exclude]
    return filtered_w_vecs

def protocol_weight_vectors(partition_dict):
    return {c_hash: circuit_weight_vectors([len(p) for p in partitions])
            for c_hash, partitions in partition_dict.items()}

# Cell
def circuit_subset_occurence(partitions, partition_w_vecs, p_phy_per_partition):
    """Return (weight)x(p_phys) (parition) subset occurance matrix transforming p_SS vector to p_L vector"""
    n_partition_elems = np.array([len(p) for p in partitions])
    Aws = np.array([math.binom(w_vec, n_partition_elems, p_phy_per_partition) for w_vec in partition_w_vecs])
    Aws = np.product(Aws, axis=-1) # mult Aws for multi-parameter, i.e. multi-partitions
    return Aws

def protocol_subset_occurence(partition_dict, w_vecs_dict, p_phys):
    return {c_hash: circuit_subset_occurence(partition_dict[c_hash], w_vecs, p_phys)
            for c_hash, w_vecs in w_vecs_dict.items()}

# Cell
def w_plus1_filter(sampler, w_ids, circuit_hash, **kwargs):
    n_Aws = np.ma.array(sampler.Aws_pmax[circuit_hash])
    n_Aws[w_ids,] = np.ma.masked # mask existing (already sampled) subsets
    w_ids.append(np.argmax(n_Aws)) # add next most important subset as possible candidate
    return w_ids

# Cell
def random_sel(w_ids, **kwargs):
    return np.random.choice(w_ids)

# Cell
def ERV_sel(self, sampler, w_ids, circuit_hash, tree_node, **kwargs):
    erv_deltas = []
    v_L = sampler.tree.var(sampler.Aws_pmax)
    delta = sampler.tree.delta(sampler.Aws_pmax)
    for idx in w_ids:
        w_vec = sampler.w_vecs[circuit_hash][idx]

        _tree_node = sampler.tree.add(w_vec, parent=tree_node, ckey=(circuit_hash, idx))
        __tree_node = sampler.tree.add('FAIL', parent=_tree_node, is_fail=True)
        _delta = sampler.tree.delta(sampler.Aws_pmax)
        _rate = __tree_node.rate

        _tree_node.counts += 1
        v_L_minus = sampler.tree.var(sampler.Aws_pmax)

        __tree_node.counts += 1
        v_L_plus = sampler.tree.var(sampler.Aws_pmax)

        _v_L = _rate * v_L_plus + (1 - _rate) * v_L_minus
        erv_delta = np.abs(v_L - _v_L) + (delta - _delta)
        # erv_delta = v_L - _v_L + (delta - _delta) # Check with new def of var
        erv_deltas.append( erv_delta )

        # revert the change
        _tree_node.counts -= 1
        __tree_node.counts -= 1
        if _tree_node.counts == 0: sampler.tree.detach(_tree_node)
        if __tree_node.counts == 0: sampler.tree.detach(__tree_node)

    idx = np.argmax(erv_deltas)
    return w_ids[idx]

# Cell
class SubsetSampler(BaseSampler):
    """Subset Sampler of quantum protocols"""

    def setup(self, p_max):
        p_max = to_ndarray(p_max)
        assert len(p_max) == len(self.fault_gen.partition_names)

        self.tree = SampleTree()
        self.w_vecs = protocol_weight_vectors(self.fault_gen.partitions)
        self.Aws_pmax = protocol_subset_occurence(self.fault_gen.partitions, self.w_vecs, p_max)
        self.set_range()

    def set_range(self, err_params=None):
        if err_params: self.fault_gen.__init__(err_params)
        self.Aws = protocol_subset_occurence(self.fault_gen.partitions, self.w_vecs, self.fault_gen.p_phy)

    def stats(self, const='Aws', **kwargs):
        if const == 'Aws': Aws = self.Aws
        elif const == 'Aws_pmax': Aws = self.Aws_pmax
        v_L = self.tree.var(Aws)
        p_L = self.tree.rate(Aws)
        if isinstance(v_L, np.ndarray) and isinstance(p_L, int):
            p_L = np.zeros_like(v_L)
        delta = self.tree.delta(Aws)
        delta_var = self.tree.delta_var(Aws)
        return p_L, np.sqrt(v_L), delta, np.sqrt(delta_var)

    def run(self, n_samples, callbacks=[], ss_filter_fn=w_plus1_filter, ss_sel_fn=ERV_sel, verbose=False):

        if not isinstance(callbacks, CallbackList):
            callbacks = CallbackList(sampler=self, callbacks=callbacks)

        self.stop_sampling = False
        callbacks.on_sampler_begin()

        for i in tqdm(range(n_samples), desc='Total'):

            callbacks.on_sample_begin()

            sim = self.simulator(self.n_qubits)
            p_it = iterate(self.protocol)
            node = next(p_it)
            tree_node = None

            while True:

                tree_node = self.tree.update(name=node, parent=tree_node)
                if node == None: break
                elif not self.protocol.out_edges(node): tree_node.is_fail = True; break

                circuit_hash, circuit = self.protocol.circuit_from_node(node)
                if circuit_hash not in self.protocol._circuits.keys() or not circuit._noisy: # correction circuits
                    msmt = sim.run(circuit)
                else:
                    w_ids = [n.ckey[1] for n in tree_node.children]
                    w_ids = ss_filter_fn(sampler=self, **locals())
                    w_idx = ss_sel_fn(sampler=self, **locals())
                    w_vec = self.w_vecs[circuit_hash][w_idx]
                    tree_node = self.tree.update(name=w_vec, parent=tree_node, ckey=(circuit_hash, w_idx),
                                                is_deterministic=True if circuit._ff_deterministic and not any(w_vec) else False)
                    faults = self.fault_gen.faults_from_weights(w_vec, circuit_hash)
                    fault_circuit = self.fault_gen.gen_circuit(len(circuit), faults)
                    msmt = sim.run(circuit, fault_circuit)

                _node = node
                node = p_it.send(msmt)

                if verbose: self._verbose(locals())

            callbacks.on_sample_end()
            if self.stop_sampling: break

        callbacks.on_sampler_end()
# AUTOGENERATED! DO NOT EDIT! File to edit: 06c_sampler.direct.ipynb (unless otherwise specified).

__all__ = ['DirectSampler']

# Cell
from .base import Sampler
import numpy as np

# Cell
class DirectSampler(Sampler):

    def stats(self, tree_idx=None):
        if tree_idx:
            p_L = self.trees[tree_idx].direct_rate
            v_L = self.trees[tree_idx].direct_variance
        else:
            p_L, v_L = [], []
            for tree in self.trees.values():
                p_L.append(tree.direct_rate)
                v_L.append(tree.direct_variance)
        return p_L, np.sqrt(v_L)

    def optimize(self, tree_node, circuit, grp_probs): # not really optimize here...
        locgrps = self.protocol_locgrps[circuit.id]
        flocs = self.err_model.choose_p(locgrps,grp_probs)
        grp_wgts = tuple(len(locs) for locs in flocs.values())
        return {'grp_wgts': grp_wgts, 'flocs': flocs}
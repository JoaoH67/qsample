# AUTOGENERATED! DO NOT EDIT! File to edit: 05a_sampler.base_sampler.ipynb (unless otherwise specified).

__all__ = ['BaseSampler']

# Cell
from ..circuit import unpack

# Cell
class BaseSampler:

    def __init__(self, protocol, simulator, fault_gen, *args, **kwargs):
        self.protocol = protocol
        self.simulator = simulator
        self.n_qubits = len(set(q for c in protocol._circuits.values() for q in unpack(c)))

        fault_gen.configure(self.protocol._circuits)
        self.fault_gen = fault_gen

        self.setup(*args, **kwargs)

    def setup(self, *args, **kwargs):
        """Must be specified by child class."""
        pass

    def _verbose(self, local_vars):
        circuit = local_vars.get('circuit', None)
        circuit_hash = local_vars.get('circuit_hash', None)
        fault_circuit = local_vars.get('fault_circuit', None)
        faults = local_vars.get('faults', None)
        node = local_vars.get('node', None)
        _node = local_vars.get('_node', None)
        msmt = local_vars.get('msmt', None)

        fs = [] if not circuit._noisy else [f'Tick {tick}: {fault_circuit[tick]}' for tick,_ in faults]
        if circuit_hash not in self.protocol._circuits.keys():
            print(f'Node {_node}, Circuit {circuit} -> {node}') # COR nodes
        else: # circuit nodes
            print(f'Node {_node}, faults {fs}, measured {msmt} -> {node}')
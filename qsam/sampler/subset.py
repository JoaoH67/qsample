# AUTOGENERATED! DO NOT EDIT! File to edit: 06d_sampler.subset.ipynb (unless otherwise specified).

__all__ = ['SubsetSampler']

# Cell
from .base import Sampler, protocol_subset_occurence, err_probs_tomatrix, tomatrix
from .tree import Variable, Constant

import numpy as np

# Cell
class SubsetSampler(Sampler):

    def stats(self, err_probs=None):
        _protocol_Aws = self.tree.constants

        if err_probs is not None:
            assert isinstance(err_probs, dict)
            err_probs = err_probs_tomatrix(err_probs, self.err_model.groups)
            self.tree.constants = protocol_subset_occurence(self.protocol_groups, self.protocol_subsets, err_probs)
        else:
            self.tree.constants = protocol_subset_occurence(self.protocol_groups, self.protocol_subsets, self.err_probs)

        v_L = self.tree.variance
        p_L = self.tree.rate
        delta = self.tree.delta
        delta_var = self.tree.norm_variance

        self.tree.constants = _protocol_Aws
        return tomatrix([p_L, np.sqrt(v_L), p_L+delta, np.sqrt(v_L+delta_var)])

    def __init__(self, protocol, simulator, pmax, err_model=None, err_probs=None):
        super().__init__(protocol, simulator, err_probs=pmax, err_model=err_model)
        probs = err_probs if err_probs else pmax
        self.err_probs = err_probs_tomatrix(probs, self.err_model.groups)

    def optimize(self, tree_node, circuit, prob_vec):

        subsets, Aws = zip(*self.tree.constants[circuit.id].items())
        if circuit._ff_det and subsets[0] in {n.name for n in tree_node.children}:
            Aws = np.ma.masked_array(Aws)
            Aws[0] = np.ma.masked
        subset = subsets[ np.random.choice(len(subsets), p=Aws) ]

        locgrps = self.protocol_groups[circuit.id]
        flocs = self.err_model.choose_w(locgrps, subset)
        return {'subset': subset, 'flocs': flocs}

    @property
    def tree(self):
        return list(self.trees.values())[0]
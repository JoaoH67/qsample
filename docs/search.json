[
  {
    "objectID": "protocol.html",
    "href": "protocol.html",
    "title": "Protocol",
    "section": "",
    "text": "source\n\ndraw_protocol\n\n draw_protocol (protocol, path=None, legend=False, figsize=(6, 6),\n                label_offset=(0.05, 0.05))\n\nDraw protocol using networkx library\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprotocol\nProtocol\n\nThe protocol to draw\n\n\npath\nNoneType\nNone\nThe path to save the resulting image to (optional)\n\n\nlegend\nbool\nFalse\nIf true, edge labels will be numbers referenced in legend\n\n\nfigsize\ntuple\n(6, 6)\nThe matplotlib figsize argument of the plot\n\n\nlabel_offset\ntuple\n(0.05, 0.05)\nOffset position of all edge labels\n\n\n\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\n\nProtocol\n\n Protocol (fault_tolerant=False, check_functions={}, *args, **kwargs)\n\nRepresentation of a Quantum (Error Correction) Protocol\n\nfrom qsample.examples import ghz1\nassert(ghz1.successor('START', {})[0] == 'ghz')\nassert(ghz1.successor('ghz', {'ghz': [1]})[0] == 'FAIL')\nghz1.successor('ghz', {'ghz': [1]})\n\n('FAIL', None)\n\n\n\nfrom qsample.examples import ghz3\nassert(ghz3.successor('START', {})[0] == 'ghz')\nassert(ghz3.successor('ghz', {'ghz': [1]})[0] == 'ghz')\nassert(ghz3.successor('ghz', {'ghz': [1,1,1]})[0] == 'FAIL')"
  },
  {
    "objectID": "sampler.tree.html",
    "href": "sampler.tree.html",
    "title": "Sample Tree",
    "section": "",
    "text": "source\n\ndraw_tree\n\n draw_tree (tree, verbose=False, path=None)\n\nGenerate and return PNG image of tree\nTo display the image in command line call .show() on the returned PIL image object.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntree\n\n\n\n\n\nverbose\nbool\nFalse\n\n\n\npath\nNoneType\nNone\nFile path to save png image to, if None only display image\n\n\nReturns\nPNG image\n\nImage of CountTree\n\n\n\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\n\nTree\n\n Tree (constants)\n\nData structure to track sampled Circuits in Protocol\n\nsource\n\n\nVariable\n\n Variable (name, count=0, invariant=False, ff_deterministic=False,\n           circuit_id=None, **kwargs)\n\nRepresentation of a random variable inside Tree\n\nsource\n\n\nDelta\n\n Delta (name, parent=None, children=None, **kwargs)\n\nRepresentation of subset cutoff error inside Tree\n\nsource\n\n\nConstant\n\n Constant (name, count=0, parent=None, **kwargs)\n\nRepresentation of a constant value inside Tree.\nA node in a tree is a uniquely identifiable object containing references to at most one parent and possibly many children. The root node has no parent and leaf nodes have not children.\nThe Constant class complements the common tree node by a count attribute which represents the number of times a node has been visited during sampling.\nTest creating a 1-level tree.\n\n# Test 1-level tree\n\nconstants = {0: {(0,): 0.8, (1,): 0.1, (2,): 0.05}}\ntree = Tree(constants)\nroot = tree.add(name='root', node_type=Variable, count=100, circuit_id=0)\nroot0 = tree.add(name=(0,), node_type=Constant, parent=root, count=40)\nroot1 = tree.add(name=(1,), node_type=Constant, parent=root, count=30)\nroot2 = tree.add(name=(2,), node_type=Constant, parent=root, count=30)\nd = tree.add(name='δ', node_type=Delta, parent=root)\nnone_0 = tree.add(name='None', node_type=Variable, parent=root0, count=40)\nnone_0.invariant = True\nfail_1 = tree.add(name='fail', node_type=Variable, parent=root1, count=20)\nnone_1 = tree.add(name='None', node_type=Variable, parent=root1, count=10)\nnone_2 = tree.add(name='None', node_type=Variable, parent=root2, count=25)\n\ntree.marked = set([fail_1])\ntree.deltas.add(d)\n# tree.draw(verbose=False)\nprint(tree)\n\nroot (100, 0.00e+00)\n├── (0,) (40)\n│   └── None (40, 0.00e+00)\n├── (1,) (30)\n│   ├── fail (20, 7.20e-03)\n│   └── None (10, 7.20e-03)\n├── (2,) (30)\n│   └── None (25, 4.60e-03)\n└── δ\n\n\nTest numerics of 1-level tree.\n\n# Test numerics 1-level tree\n\ntest_eq(tree.root_leaf_rate, 20/100)\ntest_eq(tree.subtree_sum(tree.root, tree.marked), 0.1 * 20/30)\n# test_close(tree.subtree_sum(tree.root, tree.marked | tree.deltas), 1 - (0.8 + 0.1 * 10/30 + 0.05 * 25/30), eps=1e-05)\n\nvL = 0.1**2 * fail_1.var + 0.05**2 * none_2.var # vL = vL^up\ntest_close(tree.var(mode=1), vL, eps=1e-05)\ntest_close(tree.var(mode=0), vL, eps=1e-05)\n\nTest creation of 2-level tree.\n\n# Test 2-level tree\n\nconstants = {0: {(0,): 0.8, (1,): 0.1}, # c0\n             1: {(0,): 0.7, (1,): 0.2}, # c1\n             2: {(0,): 1.0}}            # c2\n\ntree = Tree(constants)\nroot = tree.add(name='c0', circuit_id=0, node_type=Variable, count=100)\nroot0 = tree.add(name=(0,), node_type=Constant, parent=root, count=70)\nroot1 = tree.add(name=(1,), node_type=Constant, parent=root, count=30)\nd1 = tree.add(name='δ', parent=root, node_type=Delta)\n\nc1_0 = tree.add(name='c1', circuit_id=1, node_type=Variable, count=50, parent=root0)\nc1_1 = tree.add(name='c1', circuit_id=1, node_type=Variable, count=20, parent=root1)\nc2_0 = tree.add(name='c2', circuit_id=2, node_type=Variable, count=20, parent=root0)\nc2_1 = tree.add(name='c2', circuit_id=2, node_type=Variable, count=10, parent=root1)\n\nc1_0_0 = tree.add(name=(0,), node_type=Constant, parent=c1_0, count=40)\nc1_0_1 = tree.add(name=(1,), node_type=Constant, parent=c1_0, count=10)\nd2 = tree.add(name='δ', node_type=Delta, parent=c1_0)\n\nc1_1_0 = tree.add(name=(0,), node_type=Constant, parent=c1_1, count=15)\nc1_1_1 = tree.add(name=(1,), node_type=Constant, parent=c1_1, count=5)\nd3 = tree.add(name='δ', node_type=Delta, parent=c1_1)\n\nc2_0_0 = tree.add(name=(0,), node_type=Constant, parent=c2_0, count=20)\nd4 = tree.add(name='δ', node_type=Delta, parent=c2_0)\nc2_1_0 = tree.add(name=(0,), node_type=Constant, parent=c2_1, count=10)\nd5 = tree.add(name='δ', node_type=Delta, parent=c2_1)\n\nnone_c1_0_0 = tree.add(name='None', node_type=Variable, parent=c1_0_0, count=40)\nnone_c1_0_0.invariant = True\nnone_c1_0_1 = tree.add(name='None', node_type=Variable, parent=c1_0_1, count=5)\nfail_c1_0_1 = tree.add(name='fail', node_type=Variable, parent=c1_0_1, count=5)\nnone_c1_1_0 = tree.add(name='None', node_type=Variable, parent=c1_1_0, count=15)\nnone_c1_1_1 = tree.add(name='None', node_type=Variable, parent=c1_1_1, count=3)\nfail_c1_1_1 = tree.add(name='fail', node_type=Variable, parent=c1_1_1, count=2)\n\nnone_c2_0_0 = tree.add(name='None', node_type=Variable, parent=c2_0_0, count=20)\nnone_c2_0_0.invariant = True\nfail_c2_1_0 = tree.add(name='fail', node_type=Variable, parent=c2_1_0, count=10)\n\ntree.marked = set([fail_c1_0_1, fail_c1_1_1, fail_c2_1_0])\ntree.deltas = set([d1,d2,d3,d4,d5])\n\nprint(tree)\n\nc0 (100, 0.00e+00)\n├── (0,) (70)\n│   ├── c1 (50, 2.88e-03)\n│   │   ├── (0,) (40)\n│   │   │   └── None (40, 0.00e+00)\n│   │   ├── (1,) (10)\n│   │   │   ├── None (5, 2.27e-02)\n│   │   │   └── fail (5, 2.27e-02)\n│   │   └── δ\n│   └── c2 (20, 2.88e-03)\n│       ├── (0,) (20)\n│       │   └── None (20, 0.00e+00)\n│       └── δ\n├── (1,) (30)\n│   ├── c1 (20, 7.20e-03)\n│   │   ├── (0,) (15)\n│   │   │   └── None (15, 9.77e-04)\n│   │   ├── (1,) (5)\n│   │   │   ├── None (3, 4.03e-02)\n│   │   │   └── fail (2, 4.03e-02)\n│   │   └── δ\n│   └── c2 (10, 7.20e-03)\n│       ├── (0,) (10)\n│       │   └── fail (10, 2.07e-03)\n│       └── δ\n└── δ\n\n\n\nA0 = 0.8\nA1 = 0.1\nB0 = 0.7\nB1 = 0.2\nC0 = 1\n\ntest_close(tree.path_prod(tree.root, fail_c1_0_1), A0*50/70*B1*5/10)\ntest_close(tree.path_prod(tree.root, fail_c1_1_1), A1*20/30*B1*2/5)\ntest_close(tree.path_prod(tree.root, fail_c2_1_0), A1*10/30*1)\n\ntest_close(tree.path_prod(tree.root, d1), 1 - A0 - A1)\ntest_close(tree.path_prod(tree.root, d2), A0*50/70*(1-B0-B1))\ntest_close(tree.path_prod(tree.root, d3), A1*20/30*(1-B0-B1))\ntest_close(tree.path_prod(tree.root, d4), 0)\ntest_close(tree.path_prod(tree.root, d5), 0)\n\n\nv1 = A0**2 * B1**2 * ((c1_0.var + (50/70)**2)*(fail_c1_0_1.var + (5/10)**2) - (50/70)**2 * (5/10)**2)\ntest_close(tree.path_var(fail_c1_0_1), v1)\n\nv2 = A0**2 * (1-B0-B1)**2 * c1_0.var\ntest_close(tree.path_var(d2), v2)\n\nTest numerics of 2-level tree.\n\n# Test numerics 2-level tree\ntest_eq(tree.root_leaf_rate, 5/100 + 2/100 + 10/100)\n\npL = A0 * 50/70 * 0.2 * 5/10 + A1 * (20/30 * B1 * 2/5 + 10/30 * C0 * 1)\npL_up = 1 - A0 - A1 + A0*(50/70)*(1-B0-B1*5/10) + A1*(20/30)*(1-B0-B1*(3/5)) + A1*10/30*C0*1\n\ntest_eq(tree.subtree_sum(tree.root, tree.marked), pL)\ntest_close(tree.subtree_sum(tree.root, tree.marked | tree.deltas), pL_up, eps=1e-05)\n\nv14 = (c1_0.var + (50/70)**2)*(fail_c1_0_1.var + (5/10)**2) - (50/70)**2 * (5/10)**2\nv27 = (c1_1.var + (20/30)**2)*(fail_c1_1_1.var + (2/5)**2) - (20/30)**2 * (2/5)**2\nv2bar8 = (c2_1.var + (10/30)**2) * (fail_c2_1_0.var + (1)**2) - (10/30)**2 * (1)**2\nvL = A0**2*B1**2*v14 + A1**2*B1**2*v27 + A1**2*C0**2*v2bar8 - 2*A1*A1*B1*C0*(2/5)*(1)*c1_1.var\nvL += A1**2 * B0**2 * ((c1_1.var + c1_1.rate**2) * none_c1_1_0.var) # non-fail path contributions\n\ntest_close(tree.var(mode=1), vL)\n\ndelta = 1 - B0 - B1\nv1 = c1_0.var\nv2 = c1_1.var\nq4 = fail_c1_0_1.rate\nq7 = fail_c1_1_1.rate\nq8 = fail_c2_1_0.rate\n\nvL_up = (A0**2 * delta**2 * v1 + \n         A0**2 * B1**2 * v14 +\n         A1**2 * delta**2 * v2 + \n         A1**2 * B1**2 * v27 +\n         A1**2 * B0**2 * ((c1_1.var + c1_1.rate**2) * none_c1_1_0.var) + # non-fail path contribution\n         A1**2 * C0**2 * v2bar8 +\n         2 * (A0**2 * delta * B1 * q4 * v1 +\n              A1**2 * delta * B1 * q7 * v2 -\n              A1**2 * C0 * delta * v2 -\n              A1**2 * B1 * C0 * q7 * q8 * v2\n             )\n        )\n\ntest_close(tree.var(mode=0), vL_up)"
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "ghz.draw()\n\n\n\n\n\nghz_stabs.draw(scale=1.2)\n\n\n\n\n\neft.draw(scale=1.5)\n\n\n\n\n\nsz_123.draw()\n\n\n\n\n\nmeas7.draw(scale=1.2)\n\n\n\n\n\nfmx_1.draw(scale=1)\n\n\n\n\n\nfmx_2.draw(scale=1)\n\n\n\n\n\nfmx_3.draw(scale=1)\n\n\n\n\n\nnfs.draw(scale=1)\n\n\n\n\n\npor.draw()\n\n\n\n\n\nfin.draw()"
  },
  {
    "objectID": "examples.html#ghz-repeat-until-success-protocol",
    "href": "examples.html#ghz-repeat-until-success-protocol",
    "title": "Examples",
    "section": "GHZ repeat until success protocol",
    "text": "GHZ repeat until success protocol\n\nRepeat GHZ preparation circuit for a maximum of 3 times.\nOnly repeat if a measurement yields 1, i.e. the flag has been triggered.\nIf we measure in all 3 runs three times 1, count a logical failure.\nIn all other cases the protocol completed without logical failure.\n\n\nghz3.draw(figsize=(6,6))"
  },
  {
    "objectID": "examples.html#ghz-stabilizer-measurement",
    "href": "examples.html#ghz-stabilizer-measurement",
    "title": "Examples",
    "section": "GHZ stabilizer measurement",
    "text": "GHZ stabilizer measurement\n\nPrepare GHZ state with flag measurement 0. (If 1 is measured repeat preparation as often as necessary)\nReset ancilla and measure the stabilizers of the GHZ state (without noise). The stabilizers are:\n\nOne XXXX stab\nand three ZZ stabs\n\nUse syndrom from stabilizer measurements to lookup and perform the correction.\nMeasure stabilizers again.\nNow we have a logical failure if this measurement gives us any syndrome, i.e. if the measurement is anything other than four 0s.\n\n\nghz_stab.draw(figsize=(6,6), legend=True)"
  },
  {
    "objectID": "examples.html#fault-tolerant-color-code-flag-protocol",
    "href": "examples.html#fault-tolerant-color-code-flag-protocol",
    "title": "Examples",
    "section": "Fault-tolerant color code flag protocol",
    "text": "Fault-tolerant color code flag protocol\n\n…\n\n\nftsteane.draw(figsize=(8,6), label_offset=(0,0.15))"
  },
  {
    "objectID": "examples.html#det.-steane-logical-0-preparation-protocol",
    "href": "examples.html#det.-steane-logical-0-preparation-protocol",
    "title": "Examples",
    "section": "Det. Steane logical 0 preparation protocol",
    "text": "Det. Steane logical 0 preparation protocol\n\nsteane0.draw(figsize=(6,6), legend=True)"
  },
  {
    "objectID": "examples.html#flag-stabilizer-protocol",
    "href": "examples.html#flag-stabilizer-protocol",
    "title": "Examples",
    "section": "Flag stabilizer protocol",
    "text": "Flag stabilizer protocol\n\n…\n\n\nflagstab.draw(legend=True, figsize=(15,5))"
  },
  {
    "objectID": "sampler.experimental.html",
    "href": "sampler.experimental.html",
    "title": "ERV Subset Sampler",
    "section": "",
    "text": "/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\nSubsetSamplerERV\n\n SubsetSamplerERV (protocol, simulator, p_max, err_model, err_params=None,\n                   k=1)\n\nSubset sampler implementing ERV sampling technique\nfrom qsample.examples import ghz1, ghz3, ghz_stab, ftsteane, flagstab, steane0, tele from qsample.sim.stabilizer import StabilizerSimulator as CHP from qsample.noise import E1 import qsample.callbacks as cb\nsample_range = np.logspace(-5,0,11) err_params = {‘q’: sample_range} p_max = {‘q’: 1e-2}\nss_sam = SubsetSamplerERV(protocol=ghz3, simulator=CHP, p_max=p_max, err_model=E1, err_params=err_params) # ss_sam.run(1, callbacks=[cb.PrintERVPerShot()]) ss_sam.run(100, callbacks=[cb.PlotStats()])\nss_sam.tree.draw(verbose=True)"
  },
  {
    "objectID": "noise.html",
    "href": "noise.html",
    "title": "Error models",
    "section": "",
    "text": "Some common error sets\n\nsource\n\nErrorModel\n\n ErrorModel ()\n\nRepresentation of an incoherent error model.\n\nsource\n\n\nE0\n\n E0 ()\n\nNo-Error error model\n\nsource\n\n\nE1\n\n E1 ()\n\nOne prob/weight for all 1- and 2-qubit gates\n\nsource\n\n\nE2\n\n E2 ()\n\nIndividual errors on 1-qubit and 2-qubit gates.\n\nsource\n\n\nE3\n\n E3 ()\n\nErrors on all gates individual + idle.\n\nsource\n\n\nE3_1\n\n E3_1 ()\n\nLike E3, but idle locations split in two subsets.\n\nsource\n\n\nInnsbruckTrap\n\n InnsbruckTrap ()\n\nExtension of E3_1 adding crosstalk and idlem.\n!!! Under construction !!!"
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "Utilities",
    "section": "",
    "text": "source\n\nsave\n\n save (data, path)\n\nSave data to path\n\n\n\n\nType\nDetails\n\n\n\n\ndata\n*\nData to write to path\n\n\npath\nstr\nFile path to save to\n\n\n\n\nsource\n\n\nload\n\n load (path)\n\nLoad data from path\n\n\n\n\nType\nDetails\n\n\n\n\npath\nstr\nFile path to load from\n\n\nReturns\n*****\nLoaded data"
  },
  {
    "objectID": "math.html",
    "href": "math.html",
    "title": "Math",
    "section": "",
    "text": "source\n\ncomb\n\n comb (n, k)\n\nVectorized combination\n.. math:: comb(n,k) = n! / ((n-k)!k!)\n\n\n\n\nType\nDetails\n\n\n\n\nn\nint or np.array of int\nFirst parameter of combination\n\n\nk\nint or np.array of int\nSecond parameter of combination\n\n\nReturns\nnp.array\nCombination (choose k out of n)\n\n\n\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Example\n  else: warn(msg)\n\nsource\n\n\nbinom\n\n binom (k, n, p)\n\nVectorized binomial distribution\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nk\nint or list of int\nSecond parameter of combination\n\n\nn\nint or list of int\nFirst parameter of combination\n\n\np\nfloat or list of float\nProbability\n\n\nReturns\nnp.array\nValue(s) of binomial distribution evaluated at k,n,p.\n\n\n\n\ntest_close(binom(k=[1,2], n=[3,4], p=0.1), [0.243 , 0.0486], eps=1e-05)\n\n\nsource\n\n\njoint_binom\n\n joint_binom (k, n, p)\n\nProduct of independent binomial distributions with parameters k, n and p (can be list of lists)\n\n\n\n\nType\nDetails\n\n\n\n\nk\nlist of int\nList of second parameters of combination\n\n\nn\nlist of int\nList of first parameters of combination\n\n\np\nlist of list, list of float, or float\nProbability\n\n\nReturns\nnp.array\nJoint probability\n\n\n\n\nassert(joint_binom(k=[1,2], n=[3,4], p=[0.1,0.2]) == binom(k=1,n=3,p=0.1) * binom(k=2,n=4,p=0.2))\ntest_close(joint_binom(k=[1,2], n=[2,3], p=[[0.1,0.2],[.3,.4]]), [binom(1,2,0.1)*binom(2,3,0.2), binom(1,2,0.3)*binom(2,3,0.4)])\n\n\nsource\n\n\nWilson_var\n\n Wilson_var (p, N)\n\nWilson estimator of binomial variance\nThe formula for the Wilson interval is:\n.. math:: CI = p+z^2/(2n) z/(1 + z^2/n)\nwe can extract the var (z=1) as:\n.. math: Var[p] = (CI/2)^2 = (npq + 0.25) / (1 + n)^2\n\n\n\n\nType\nDetails\n\n\n\n\np\nfloat\nEstimator of probability\n\n\nN\nint\nSample size\n\n\nReturns\nfloat\nEstimated variance of Wilson CI\n\n\n\n\nsource\n\n\nWald_var\n\n Wald_var (p, N)\n\nWald estimation of binomial variance\n\n\n\n\nType\nDetails\n\n\n\n\np\nfloat\nEstimator of probability\n\n\nN\nint\nSample size\n\n\nReturns\nfloat\nEstimated variance of Wald CI\n\n\n\n\nsource\n\n\nsubset_cards\n\n subset_cards (superset)\n\nCalculate cardinalities of all possible subsets of superset\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsuperset\nset\nInput set\n\n\nReturns\nlist of int\nAll possible cardinalities of subsets in superset\n\n\n\n\nassert(subset_cards({1,2,3}) == {0,1,2,3})\nassert(subset_cards({(0,0), (0,1), (0,2)}) == {0,1,2,3})\n\n\nsource\n\n\ncartesian_product\n\n cartesian_product (list_of_sets)\n\nCalculate cartesian product between all members of sets\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nlist_of_sets\nlist\nList of sets between which to calculate Cartesian product\n\n\nReturns\nlist of tuple\nCartesian products\n\n\n\n\nassert(cartesian_product([{1,2},{3,4}]) == [(1,3), (1,4), (2,3), (2,4)])\n\n\nsource\n\n\nsubset_probs\n\n subset_probs (circuit, error_model, prob)\n\nCalculate occurence probability of subsets in circuit with physical error rate prob. error_model defines how the circuit is to be partitioned before occurence probabilities are calculated.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncircuit\nCircuit\nCircuit wrt. which subset probabilities are calculated\n\n\nerror_model\nErrorModel\nError model by which to partition circuit\n\n\nprob\nfloat or list of float\nPhysical error probabilities"
  },
  {
    "objectID": "circuit.html",
    "href": "circuit.html",
    "title": "Circuit",
    "section": "",
    "text": "unpack\n\n unpack (seq)\n\nGenerator to unpack all values of dicts inside a list of dicts\n\n\n\n\nType\nDetails\n\n\n\n\nseq\nIterable\nIterable to recursively unpack\n\n\n\n\n\n\ndraw_circuit\n\n draw_circuit (circuit, path=None, scale=2)\n\nDraw circuit using latextools library\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncircuit\nCircuit\n\nThe circuit to draw\n\n\npath\nNoneType\nNone\nThe path to save the resulting image to (optional)\n\n\nscale\nint\n2\nThe scale of the image\n\n\nReturns\ndrawSvg.drawing.Drawing\n\nImage object\n\n\n\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\n\n\nCircuit\n\n Circuit (ticks=None, noisy=True, ff_deterministic=None)\n\nRepresentation of a quantum circuit\n\nlist(unpack([{'X': {1,2,3}},{'CNOT': {(0,1), (1,3)}}]))\n\n[1, 2, 3, 0, 1, 1, 3]\n\n\n\n# Tests\n\nc1 = Circuit(ticks=[{'Z': {0}}])\nc2 = Circuit(ticks=[{'X': {3}}])\nc3 = Circuit(ticks=[{'X': {3}}, {'Z': {0}}])\nc4 = Circuit(ticks=[])\nassert(c1.id != c2.id != c3.id != c4.id)\nc1.id, c2.id, c3.id, c4.id\n\n('bceb2', '04f89', 'b597e', 'da39a')"
  },
  {
    "objectID": "sim.mixin.html",
    "href": "sim.mixin.html",
    "title": "Simulator Mixin",
    "section": "",
    "text": "CircuitRunnerMixin\n\n CircuitRunnerMixin ()\n\nSimulator mixin for running quantum circuits"
  },
  {
    "objectID": "sampler.direct.html",
    "href": "sampler.direct.html",
    "title": "Direct Sampler",
    "section": "",
    "text": "/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\nDirectSampler\n\n DirectSampler (protocol, simulator, err_model, err_params=None)\n\nDirect Monte Carlo Sampler"
  },
  {
    "objectID": "callbacks.html",
    "href": "callbacks.html",
    "title": "Sampler Callbacks",
    "section": "",
    "text": "/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\nCallbackList\n\n CallbackList (sampler, callbacks=[])\n\nManages execution of all specified callbacks\n\nsource\n\n\nCallback\n\n Callback ()\n\nCallback super class: All callbacks must inherit this class.\n\nsource\n\n\nPlotStats\n\n PlotStats ()\n\nPlot sampler statistics at end of sampling process\n\nsource\n\n\nRelStdTarget\n\n RelStdTarget (target=0.1, include_delta=True)\n\nCallback to stop sampling when the relative standard deviation target target is reached\n\nsource\n\n\nStatsPerShot\n\n StatsPerShot (log_dir=None)\n\nStore information of Sampler.stats() with each shot and plot each statistic as as function of shots after sampler ends\n\nsource\n\n\nVerboseCircuitExec\n\n VerboseCircuitExec ()\n\nCallback to output detailed information about circuit selection, specific fault that occured, measurement outcome and next circuit\n\nsource\n\n\nPlotERVPerShot\n\n PlotERVPerShot (log_dir=None)\n\nCallback to plot statistics about ERV values and selected subsets due to ERV\n\nsource\n\n\nPrintERVPerShot\n\n PrintERVPerShot ()\n\nCallback to print ERV statistics per shot\n\nsource\n\n\nPathProducts\n\n PathProducts (log_dir=None)\n\nCallback to plot distribution of sampled paths\n\nsource\n\n\nSubsetRates\n\n SubsetRates (log_dir=None)\n\nCallback to plot progression of each fail path as a function of shots"
  },
  {
    "objectID": "sim.stabilizer.html",
    "href": "sim.stabilizer.html",
    "title": "CHP Simulator",
    "section": "",
    "text": "/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Reference\n  else: warn(msg)\n\n\nStabilizerSimulator\n\n StabilizerSimulator (num_qubits)\n\nThe bare minimum needed for the CHP simulation."
  },
  {
    "objectID": "sim.statevector.html",
    "href": "sim.statevector.html",
    "title": "Statevector Simulator",
    "section": "",
    "text": "/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\n\nMeasureResult\n\n MeasureResult (value:bool)\n\nClass to hold measurement result\n\n\n\nStatevectorSimulator\n\n StatevectorSimulator (num_qubits)\n\nStatevector simulator using ProjectQ simulator"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "qsample",
    "section": "",
    "text": "pip install qsample"
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "qsample",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nThis package requires Python 3.9 or higher.\n\npdflatex (for circuit rendering)"
  },
  {
    "objectID": "index.html#when-to-use",
    "href": "index.html#when-to-use",
    "title": "qsample",
    "section": "When to use",
    "text": "When to use\n\nDefine QEC protocols that consist of one or more quantum circuits with in-sequence measurements and feed-forward of measurement information\n\nApply circuit-level incoherent Pauli noise at low physical error rates (i.e. high fidelity physical operations)\nSimulate and sample protocol execution over ranges of varying physical error rates, using customizable callbacks"
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "qsample",
    "section": "Getting started",
    "text": "Getting started\nDefine a quantum protocol to sample from. In qsample a protocol is represented as a graph with quantum Circuits as nodes and transition checks as edges.\nTo sample logical error rates of an error-corrected quantum state teleportation protocol, we define the teleportation circuit which sends the state of the first to the third qubit.\n\nfrom qsample.circuit import Circuit\n\nteleport = Circuit([{\"init\": {0, 1, 2}},\n                    {\"H\": {1}},\n                    {\"CNOT\": {(1, 2)}},\n                    {\"CNOT\": {(0, 1)}},\n                    {\"H\": {0}},\n                    {\"measure\": {0, 1}}])\n\nteleport.draw()\n\n\n\n\nAdditionally, we need a circuit to (perfectly) measure the third qubit after running teleport. If the outcome of this measurement is 0 (corresponding to the initially prepared \\(|0\\rangle\\) state of qubit 1) the teleportation succeded. If the outcome is 1 however, we want to count a logical failure of this protocol.\n\nmeas = Circuit([{\"measure\": {2}}], noisy=False)\n\nmeas.draw()\n\n\n\n\nBetween teleport and meas apply a correction to qubit 3 conditioned on the measurement outcome (syndrome) of the teleportation circuit. We define the lookup function lut\n\ndef lut(syn):\n    op = {0: 'I', 1: 'X', 2: 'Z', 3: 'Y'}[syn]\n    return Circuit([{op: {2}}], noisy=False)\n\nFinally, define the circuit sequence and transition logic in a Protocol, commenced by a START and terminated by a FAIL node.\n\nfrom qsample.protocol import Protocol\n\ntele_proto = Protocol(check_functions={'lut': lut})\ntele_proto.add_nodes_from(['tele', 'meas'], circuits=[teleport, meas])\ntele_proto.add_edge('START', 'tele', check='True')\ntele_proto.add_edge('tele', 'COR', check='lut(tele[-1])')\ntele_proto.add_edge('COR', 'meas', check='True')\ntele_proto.add_edge('meas', 'FAIL', check='meas[-1] == 1')\n\ntele_proto.draw(figsize=(8,5))\n\n\n\n\nNotice that we do not define any initial circuit for the correction COR but pass our lookup function to the check_functions dictionary, which makes it accessible inside the check transition statements (edges) between circuits. This way we can dynamically insert circuits into our protocol at execution time.\nAfter the protocol has been defined we can repeatedly execute (i.e. sample) it in the presence of incoherent noise. Let’s say we are interested in the logical error rates for physical error rates on all 1- and 2-qubit gates of \\(p_{phy}=10^{-4}, 10^{-3}\\), and \\(10^{-2}\\). The corresponding noise model is called E1 in qsample. The groups of all 1- and 2-qubit gates are indexed by the key q in E1.\n\nfrom qsample.noise import E1\n\nerr_params = {'q': [1e-5, 1e-4, 1e-3, 1e-2, 1e-1]}\n\nWe are ready to sample. As our protocol only contains Clifford gates let’s choose the StabilizerSimulator, as well as the PlotStats callback for plotting the resulting logical error rate as function of \\(p_{phy}\\).\n\nfrom qsample.sampler.direct import DirectSampler\nfrom qsample.sim.stabilizer import StabilizerSimulator as CHP\nfrom qsample.callbacks import PlotStats\n\nsam = DirectSampler(protocol=tele_proto, simulator=CHP, err_model=E1, err_params=err_params)\nsam.run(n_shots=10000, callbacks=[PlotStats()])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotice, that at low error rates DirectSampler performs badly, as most of the time the protocol is executed error free and, consequently, logical errors are measured infrequently. In this regime it is much more efficient to use an importance sampling strategy to avoid fault-free protocol execution and instead put more emphasis on execution with at least one fault happening. This approach is implemented in the SubsetSampler class. We only need to specify one additional parameter p_max which specifies the \\(p_{phy}\\) at which sampling takes place. This parameter must be chosen experimentally by repeated sampling and observing which subsets have the largest impact on the failure rate. We must always choose a value such that the subset occurence probability has an exponentially falling shape. Only in this case is the scaling of the sampling results valid. Below we see that for the teleportation circuit a p_max-value of 0.01 and 0.1 is still okay, while 0.3 would be problematic. For more information refer to the linked publication.\n\nimport qsample.math as math\n\nfor p_phy in [0.01, 0.1, 0.3]:\n    Aws = math.subset_probs(teleport, E1(), p_phy)\n    plt.figure()\n    plt.title(\"Subset occurence prob. $A_w$ at $p_{phy}$=%.2f\" % p_phy)\n    plt.bar(list(map(str,Aws.keys())), Aws.values())\n    plt.ylabel(\"$A_w$\")\n    plt.xlabel(\"Subsets\")\n\n\n\n\n\n\n\n\n\n\nLet’s choose a \\(p_{max}=0.1\\) for the same error model as before and start sampling. (Note the significant difference in the number of samples)\n\nfrom qsample.sampler.subset import SubsetSampler\n\nss_sam = SubsetSampler(protocol=tele_proto, simulator=CHP,  p_max={'q': 0.1}, err_model=E1, err_params=err_params)\nss_sam.run(500, callbacks=[PlotStats()])\n\n\n\n\n\n\n\nThe sampling results are internally stored by the SubsetSampler in a Tree data structure\n\nss_sam.tree.draw(verbose=True)\n\n\n\n\nWe see that only the teleportation protocol has fault weight subsets, while the meas and COR circuits are noise-free (ie.e no subsets). The leaf nodes FAIL and None represent logical failure and successful teleportation events, respectively. \\(\\delta\\) represents the missing subsets which have not been sampled and which result in the upper bound on the failure rate (SS up).\nFinally, let’s compare the results of DirectSampler and SubsetSampler.\n\np_L_low, std_low, p_L_up, std_up = ss_sam.stats()\np_L, std = sam.stats()\n\nimport matplotlib.pyplot as plt\n\nsample_range = err_params['q']\nplt.errorbar(sample_range, p_L, fmt='--', c=\"black\", yerr=std, label=\"Direct MC\")\nplt.loglog(sample_range, p_L_low, label='SS low')\nplt.fill_between(sample_range, p_L_low - std_low, p_L_low + std_low, alpha=0.2)\nplt.loglog(sample_range, p_L_up, label='SS low')\nplt.fill_between(sample_range, p_L_up - std_up, p_L_up + std_up, alpha=0.2)\nplt.plot(sample_range, sample_range,'k:', alpha=0.5)\nplt.xlabel('$p_{phy}$(q)')\nplt.ylabel('$p_L$')\nplt.legend();\n\n\n\n\nMore things to explore: * qsample.examples shows more examples of protocol and protocol samplings. * qsample.noise defines more complex error models, as well as a superclass ErrorModel which can be used to define custom error models. * qsample.callbacks defines more callbacks, as well as the superclass Callback which allows for the implementation of custom callbacks."
  },
  {
    "objectID": "index.html#contribute",
    "href": "index.html#contribute",
    "title": "qsample",
    "section": "Contribute",
    "text": "Contribute\n\nFeel free to submit your feature request via github issues"
  },
  {
    "objectID": "index.html#team",
    "href": "index.html#team",
    "title": "qsample",
    "section": "Team",
    "text": "Team\nqsample was developed by Don Winter based on and in collaboration with Sascha Heußen under supervision of Prof. Dr. Markus Müller."
  },
  {
    "objectID": "sampler.subset.html",
    "href": "sampler.subset.html",
    "title": "Subset Sampler",
    "section": "",
    "text": "/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section References\n  else: warn(msg)\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\nsource\n\nSubsetSampler\n\n SubsetSampler (protocol, simulator, p_max, err_model, err_params=None)\n\nClass to represent subset sampler\nfrom qsample.examples import ghz1, ghz3, ghz_stab, ftsteane, flagstab, steane0, tele from qsample.sim.stabilizer import StabilizerSimulator as CHP from qsample.noise import E1 import qsample.callbacks as cb\nsample_range = np.logspace(-5,0,11) err_params = {‘q’: sample_range} p_max = {‘q’: 0.01}\nss_sam = SubsetSampler(protocol=flagstab, simulator=CHP, p_max=p_max, err_model=E1, err_params=err_params) ss_sam.run(50, callbacks=[cb.PlotStats()])\nss_sam.tree.draw(verbose=True)"
  }
]
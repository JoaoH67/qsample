[
  {
    "objectID": "circuit.html",
    "href": "circuit.html",
    "title": "Circuit",
    "section": "",
    "text": "unpack\n\n unpack (seq)\n\nGenerator to unpack all values of dicts inside a list of dicts\n\n\n\n\nType\nDetails\n\n\n\n\nseq\nIterable\nIterable to recursively unpack\n\n\n\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\n\n\nCircuit\n\n Circuit (ticks=[], noisy=True, ff_det=False)\n\nRepresentation of a quantum circuit\n\nlist(unpack([{'X': {1,2,3}},{'CNOT': {(0,1), (1,3)}}]))\n\n[1, 2, 3, 0, 1, 1, 3]\n\n\n\n# Tests\n\nc1 = Circuit(ticks=[{'Z': {0}}])\nc2 = Circuit(ticks=[{'X': {3}}])\nc3 = Circuit(ticks=[{'X': {3}}, {'Z': {0}}])\nc4 = Circuit(ticks=[])\nassert(c1.id != c2.id != c3.id != c4.id)\nc1.id, c2.id, c3.id, c4.id\n\n('bceb2', '04f89', 'b597e', 'da39a')\n\n\n\n# c = Circuit(ticks=[{'init': {0,1,2,3}}, {'X': {0,1}}, {'CNOT': {(0,3)}}, {'measure': {1,3}}])\n# c.partition\n\n{'init': [(0, 0), (0, 1), (0, 2), (0, 3)],\n 'q1': [(1, 0), (1, 1)],\n 'q2': [(2, (0, 3))],\n 'meas': [(3, 1), (3, 3)],\n 'idle': [(1, 2), (1, 3), (2, 1), (2, 2), (3, 0), (3, 2)]}"
  },
  {
    "objectID": "sim.statevector.html",
    "href": "sim.statevector.html",
    "title": "Statevector Simulator",
    "section": "",
    "text": "MeasureResult\n\n MeasureResult (value:bool)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nStatevectorSimulator\n\n StatevectorSimulator (num_qubits)\n\nSimulator mixin for running quantum circuits"
  },
  {
    "objectID": "sim.mixin.html",
    "href": "sim.mixin.html",
    "title": "Simulator Mixin",
    "section": "",
    "text": "CircuitRunnerMixin\n\n CircuitRunnerMixin ()\n\nSimulator mixin for running quantum circuits"
  },
  {
    "objectID": "sampler.tree.html",
    "href": "sampler.tree.html",
    "title": "Count Tree",
    "section": "",
    "text": "This data structure is based on the Python package anytree (https://github.com/c0fec0de/anytree) which has been extended by the classes SubsetCountNode, CircuitCountNode and CountTree.\n\n\ndraw_tree\n\n draw_tree (tree, path=None)\n\nGenerate and return PNG image of CountTree\nTo display the image in command line call .show() on the returned PIL image object.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntree\n\n\n\n\n\npath\nNoneType\nNone\nFile path to save png image to, if None only display image\n\n\nReturns\nPNG image\n\nImage of CountTree\n\n\n\n\n\n\nCircuitCountNode\n\n CircuitCountNode (name, count=0, invariant=False, parent=None,\n                   children=None)\n\nSubclass of Node to represent a circuit node.\nCircuitCountNode represent differentiable rates in a CountTree. Differentiability refers to the partial derivatives in the propagation of uncertainty formula for the lower and upper bound of the logical failure rate.\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\n\n\nSubsetCountNode\n\n SubsetCountNode (name, circuit_id=None, invariant=False, count=0,\n                  parent=None, children=None)\n\nSubclass of CountNode to represent a subset node\n\n\n\nCountNode\n\n CountNode (name, count=0, invariant=False, parent=None, children=None)\n\nClass to represent a tree node of a CountTree.\nA node in a tree is a uniquely identifiable object containing references to at most one parent and possibly many children. The root node has no parent and leaf nodes have not children.\nThe CountNode class complements the common tree node by a count attribute which represents the number of times a node has been visited during sampling.\n\n\n\nCountTree\n\n CountTree (constants)\n\nClass to represent a tree of CircuitCountNode and SubsetCountNode nodes.\nTest creating a 1-level tree.\n\n# Test 1-level tree\n\nconstants = {0: {(0,): 0.8, (1,): 0.1, (2,): 0.05}}\ntree = CountTree(constants)\nroot = tree.add(name='root', node_type=CircuitCountNode, count=100)\nroot0 = tree.add(name=(0,), circuit_id=0, node_type=SubsetCountNode, parent=root, count=40)\nroot1 = tree.add(name=(1,), circuit_id=0, node_type=SubsetCountNode, parent=root, count=30)\nroot2 = tree.add(name=(2,), circuit_id=0, node_type=SubsetCountNode, parent=root, count=30)\nnone_0 = tree.add(name='None', node_type=CircuitCountNode, parent=root0, count=40)\nnone_0.invariant = True\nfail_1 = tree.add(name='fail', node_type=CircuitCountNode, parent=root1, count=20)\nnone_1 = tree.add(name='None', node_type=CircuitCountNode, parent=root1, count=10)\nfail_2 = tree.add(name='fail', node_type=CircuitCountNode, parent=root2, count=5)\nnone_2 = tree.add(name='None', node_type=CircuitCountNode, parent=root2, count=25)\n\ntree.marked_leaves = set([fail_1, fail_2])\nprint(tree)\n\nroot (100, 0.00e+00)\n├── (0,) (40)\n│   └── None (40, 0.00e+00)\n├── (1,) (30)\n│   ├── fail (20, 7.20e-03)\n│   └── None (10, 7.20e-03)\n└── (2,) (30)\n    ├── fail (5, 4.60e-03)\n    └── None (25, 4.60e-03)\n\n\nTest numerics of 1-level tree.\n\n# Test numerics 1-level tree\n\ntest_eq(tree.root_leaf_rate, 20/100 + 5/100)\ntest_eq(tree.path_sum(tree.root, mode=1), 0.1 * 20/30 + 0.05 * 5/30)\ntest_close(tree.path_sum(tree.root, mode=2), 0.8 + 0.1 + 0.05, eps=1e-05)\ntest_close(tree.uncertainty_propagated_variance(mode=1), 0.1**2 * fail_1.variance + 0.05**2 * fail_2.variance, eps=1e-05)\ntest_close(tree.uncertainty_propagated_variance(mode=0), 0.1**2 * none_1.variance + 0.05**2 * none_2.variance, eps=1e-05)\n\nTest creation of 2-level tree.\n\n# Test 2-level tree\n\nconstants = {0: {(0,): 0.8, (1,): 0.1}, \n             1: {(0,): 0.7, (1,): 0.2},\n             2: {(0,): 1.0}}\n\ntree = CountTree(constants)\nroot = tree.add(name='c0', node_type=CircuitCountNode, count=100)\nroot0 = tree.add(name=(0,), circuit_id=0, node_type=SubsetCountNode, parent=root, count=70)\nroot1 = tree.add(name=(1,), circuit_id=0, node_type=SubsetCountNode, parent=root, count=30)\nc1_0 = tree.add(name='c1', node_type=CircuitCountNode, count=50, parent=root0)\nc1_0.invariant = True\nc1_1 = tree.add(name='c1', node_type=CircuitCountNode, count=20, parent=root1)\nc2_0 = tree.add(name='c2', node_type=CircuitCountNode, count=20, parent=root0)\nc2_0.invariant = True\nc2_1 = tree.add(name='c2', node_type=CircuitCountNode, count=10, parent=root1)\n\nc1_0_0 = tree.add(name=(0,), circuit_id=1, node_type=SubsetCountNode, parent=c1_0, count=40)\nc1_0_1 = tree.add(name=(1,), circuit_id=1, node_type=SubsetCountNode, parent=c1_0, count=10)\nc1_1_0 = tree.add(name=(0,), circuit_id=1, node_type=SubsetCountNode, parent=c1_1, count=15)\nc1_1_1 = tree.add(name=(1,), circuit_id=1, node_type=SubsetCountNode, parent=c1_1, count=5)\n\nc2_0_0 = tree.add(name=(0,), circuit_id=2, node_type=SubsetCountNode, parent=c2_0, count=20)\nc2_1_0 = tree.add(name=(0,), circuit_id=2, node_type=SubsetCountNode, parent=c2_1, count=10)\n\nnone_c1_0_0 = tree.add(name='None', node_type=CircuitCountNode, parent=c1_0_0, count=40)\nnone_c1_0_0.invariant = True\nnone_c1_0_1 = tree.add(name='None', node_type=CircuitCountNode, parent=c1_0_1, count=5)\nfail_c1_0_1 = tree.add(name='fail', node_type=CircuitCountNode, parent=c1_0_1, count=5)\nnone_c1_1_0 = tree.add(name='None', node_type=CircuitCountNode, parent=c1_1_0, count=15)\nnone_c1_1_1 = tree.add(name='None', node_type=CircuitCountNode, parent=c1_1_1, count=3)\nfail_c1_1_1 = tree.add(name='fail', node_type=CircuitCountNode, parent=c1_1_1, count=2)\n\nnone_c2_0_0 = tree.add(name='None', node_type=CircuitCountNode, parent=c2_0_0, count=20)\nnone_c2_0_0.invariant = True\nfail_c2_1_0 = tree.add(name='fail', node_type=CircuitCountNode, parent=c2_1_0, count=10)\n\ntree.marked_leaves = set([fail_c1_0_1, fail_c1_1_1, fail_c2_1_0])\nprint(tree)\n\nc0 (100, 0.00e+00)\n├── (0,) (70)\n│   ├── c1 (50, 0.00e+00)\n│   │   ├── (0,) (40)\n│   │   │   └── None (40, 0.00e+00)\n│   │   └── (1,) (10)\n│   │       ├── None (5, 2.27e-02)\n│   │       └── fail (5, 2.27e-02)\n│   └── c2 (20, 0.00e+00)\n│       └── (0,) (20)\n│           └── None (20, 0.00e+00)\n└── (1,) (30)\n    ├── c1 (20, 7.20e-03)\n    │   ├── (0,) (15)\n    │   │   └── None (15, 9.77e-04)\n    │   └── (1,) (5)\n    │       ├── None (3, 4.03e-02)\n    │       └── fail (2, 4.03e-02)\n    └── c2 (10, 7.20e-03)\n        └── (0,) (10)\n            └── fail (10, 2.07e-03)\n\n\nTest numerics of 2-level tree.\n\n# Test numerics 2-level tree\n\ntest_eq(tree.root_leaf_rate, 5/100 + 2/100 + 10/100)\ntest_eq(tree.path_sum(tree.root, mode=1), 0.8 * 50/70 * 0.2 * 5/10 + 0.1 * (20/30 * 0.2 * 2/5 + 10/30 * 1.0 * 1))\ntest_close(tree.path_sum(tree.root, mode=2), 0.8 * (50/70 * 0.9 + 20/70) + 0.1 * (20/30 * 0.9 + 10/30), eps=1e-05)\nvar1 = (0.8 * 0.2 * 5/10)**2 * c1_0.variance + (0.8 * 50/70 * 0.2)**2 * fail_c1_0_1.variance + (0.1 * 0.2 * 2/5 - 0.1 * 1)**2 * c1_1.variance + (0.1 * 0.2 * 20/30)**2 * fail_c1_1_1.variance\ntest_close(tree.uncertainty_propagated_variance(mode=1), var1, eps=1e-05)\nvar2 = (0.8 * (0.7 * 1 + 0.2 * 5/10 - 1))**2 * c1_0.variance + (0.8 * 50/70 * 0.2)**2 * fail_c1_0_1.variance + (0.1 * (0.7 + 0.2*3/5))**2 * c1_1.variance + (0.1 * 20/30 * 0.2)**2 * fail_c1_1_1.variance\ntest_close(tree.uncertainty_propagated_variance(mode=0), var2, eps=1e-05)"
  },
  {
    "objectID": "protocol.html",
    "href": "protocol.html",
    "title": "Protocol",
    "section": "",
    "text": "# class Protocol:\n#     \"\"\"Representation of a Quantum protocol\"\"\"\n    \n#     def __init__(self, fault_tolerance_level=False, *args, **kwargs):\n#         self.graph = nx.DiGraph(*args, **kwargs)\n#         self.fault_tolerance_level = fault_tolerance_level\n#         self._check_fns = DEFAULT_FUNCTIONS.copy()\n#         self._check_fns.update(len=len, bin=bin)\n#         self._circuits = {}\n        \n#     @property\n#     def n_qubits(self):\n#         return len(set(qb for c in self._circuits.values() for qb in unpack(c)))\n        \n#     def add_node(self, name, circuit):\n#         self._circuits[circuit.id] = circuit\n#         self.graph.add_node(name, circuit_id=circuit.id)\n        \n#     def add_edge(self, *args, **kwargs):\n#         self.graph.add_edge(*args, **kwargs)\n    \n#     def add_nodes_from(self, *args, **kwargs):\n#         self.graph.add_nodes_from(*args, **kwargs)\n    \n#     def update_node(self, node, circuit):\n#         self._circuits[circuit.id] = circuit\n#         self.graph.nodes[node]['circuit_id'] = circuit.id\n        \n#     def add_nodes_from(self, names, circuits):\n#         if not isinstance(circuits, (list,tuple,set)):\n#             circuits = [circuits] * len(names)\n#         for name, circuit in zip(names, circuits):\n#             self.add_node(name, circuit)\n\n#     # @cached_property\n#     # def partition(self):\n#     #     return {cid: circ.partition for cid,circ in self._circuits.items()}\n    \n#     @lru_cache(maxsize=128)\n#     def checks(self, node):\n#         adj_nodes = self.graph.out_edges(node)\n#         return {pair[1]: self.graph.edges[pair]['check'] for pair in adj_nodes}\n    \n#     def save(self, path):\n#         with open(path, 'wb') as fp:\n#             pickle.dump(self, fp)\n            \n#     def load(self, path):\n#         with open(path, 'rb') as fp:\n#             res = pickle.load(fp)\n#         self._circuits = res._circuits\n#         self._check_fns = res._check_fns\n#         self.fault_tolerant = res.fault_tolerant\n#         return self\n    \n#     def __iter__(self):\n#         node = 'START'\n#         hist = {}\n#         name_handler = lambda ast_node: hist.get(ast_node.id, None)\n        \n#         while node:\n        \n#             checks = {n: simple_eval(check, names=name_handler, functions=self._check_fns)\n#                      for n,check in self.checks(node).items()}\n#             next_nodes = [(nn,check) for nn,check in checks.items() if check]\n            \n#             if len(next_nodes) == 0:\n#                 node = None\n#             elif len(next_nodes) == 1:\n#                 node, check_ret = next_nodes[0]\n                \n#                 if isinstance(check_ret, Circuit):\n#                     self.update_node(node, check_ret)\n                \n#                 if not self.graph.out_edges(node): break\n                \n#                 circuit_id = self.graph.nodes(data='circuit_id')[node]\n#                 circuit = self._circuits[circuit_id]\n#                 yield node, circuit\n#                 hist[node] = hist.get(node,[]) + [self.msmt]\n#             else: \n#                 raise Exception(f\"Too many checks True for node {node}.\")\n                \n#         yield node, None\n            \n                \n#     def send(self, msmt):\n#         if msmt: self.msmt = int(msmt,2)\n#         else: self.msmt = None\n        \n#     def draw(self, path=None, legend=False, figsize=(6,6), label_offset=(0.05,0.05)):\n#         import matplotlib.pyplot as plt\n#         plt.figure(figsize=figsize)\n        \n#         pos = nx.kamada_kawai_layout(self.graph)\n#         size = max([len(n)**2 * 100 for n in pos.keys()])\n#         col = ['#ff0000' if not self.graph.out_edges(n) else '#0080ff' if not self.graph.in_edges(n) else 'black' for n in self.graph.nodes]\n#         nx.draw(self.graph, pos=pos, with_labels=True, node_color='white', node_size=size, edgecolors=col)\n        \n#         edge_lbls = nx.get_edge_attributes(self.graph, 'check')\n#         if legend:\n#             import matplotlib.lines as mlines\n#             n_edge_lbls, legend_lbls = dict(), []\n#             edge_cnt = 0\n#             for (to,fr),lbl in edge_lbls.items():\n#                 if lbl == 'True': n_edge_lbls[(to,fr)] = lbl\n#                 else: \n#                     edge_cnt += 1\n#                     n_edge_lbls[(to,fr)] = f\"${edge_cnt}$\"\n#                     leg_lbl = mlines.Line2D([], [], color='black', marker=f'${edge_cnt}$', linestyle='None', markersize=8, label=lbl)\n#                     legend_lbls.append(leg_lbl)\n#             lgd = plt.legend(handles=legend_lbls, bbox_to_anchor=(1.04, 1), loc=\"upper left\")\n#             edge_lbls = n_edge_lbls\n            \n#         dx, dy = label_offset\n#         loop_pos = {n:(x+dx, y+dy) for n,(x,y) in pos.items()}\n#         loop_lbls = {(to,fr): lbl for (to,fr), lbl in edge_lbls.items() if to==fr}\n#         lbls = {(to,fr): lbl for (to,fr), lbl in edge_lbls.items() if to!=fr}\n#         edge_box = dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.3')\n#         nx.draw_networkx_edge_labels(self, pos, lbls, font_size=12, bbox=edge_box, rotate=False if legend else True)\n#         nx.draw_networkx_edge_labels(self, loop_pos, loop_lbls, font_size=12, bbox=edge_box, rotate=True)\n        \n#         if path and legend: plt.savefig(save_path, bbox_extra_artists=(lgd,), bbox_inches='tight')\n#         elif path: plt.savefig(path, bbox_inches='tight')\n\n\n\ndraw_protocol\n\n draw_protocol (protocol, path=None, legend=False, figsize=(6, 6),\n                label_offset=(0.05, 0.05))\n\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\n\n\nProtocol\n\n Protocol (ft_level=0, check_functions={}, *args, **kwargs)\n\nRepresentation of a Quantum (Error Correction) Protocol\n\nfrom qsample.examples import ghz1\n\n\n\n\n\nassert(ghz1.successor('START', {})[0] == 'ghz')\nassert(ghz1.successor('ghz', {'ghz': [1]})[0] == 'FAIL')\nghz1.successor('ghz', {'ghz': [1]})\n\n('FAIL', None)\n\n\n\nfrom qsample.circuit import Circuit\n\nghz = Circuit([ {\"init\": {0,1,2,3,4}},\n                {\"H\": {0}},\n                {\"CNOT\": {(0,1)}},\n                {\"CNOT\": {(1,2)}},\n                {\"CNOT\": {(2,3)}},\n                {\"CNOT\": {(3,4)}},\n                {\"CNOT\": {(0,4)}},\n                {\"measure\": {4}}   ], ff_det=True)\n\ndef gen_ghz3():\n    \n    def repeat(m):\n        return len(m) < 3 and m[-1] == 1\n\n    def logErr(m):\n        return len(m) >= 3 and sum(m) == len(m)\n\n    functions = {'logErr': logErr, 'repeat': repeat}\n\n    ghz3 = Protocol(ft_level=1, check_functions=functions)\n    ghz3.add_node('ghz', circuit=ghz)\n    \n    ghz3.add_edge('START', 'ghz', check='True')\n    ghz3.add_edge('ghz', 'ghz', check='repeat(ghz)')\n    ghz3.add_edge('ghz', 'FAIL', check='logErr(ghz)')\n    \n    return ghz3\nghz3 = gen_ghz3()\nghz3.draw()\n\n\n\n\n\nassert(ghz3.successor('START', {})[0] == 'ghz')\nassert(ghz3.successor('ghz', {'ghz': [1]})[0] == 'ghz')\nassert(ghz3.successor('ghz', {'ghz': [1,1,1]})[0] == 'FAIL')"
  },
  {
    "objectID": "noise.html",
    "href": "noise.html",
    "title": "Noise / Error models",
    "section": "",
    "text": "Some common error sets\n\n\nErrorModel\n\n ErrorModel ()\n\nRepresentation of an incoherent error model.\n\n\n\nE0\n\n E0 ()\n\nNo-Error error model\n\n\n\nE1\n\n E1 ()\n\nOne prob/weight for all 1- and 2-qubit gates\n\n\n\nE2\n\n E2 ()\n\nIndividual errors on 1-qubit and 2-qubit gates.\n\n\n\nE3\n\n E3 ()\n\nErrors on all gates individual + idle.\n\n\n\nE3_1\n\n E3_1 ()\n\nLike E3, but idle locations split in two subsets.\n\n\n\nInnsbruckTrap\n\n InnsbruckTrap ()\n\nExtension of E3_1 adding crosstalk and idlem."
  },
  {
    "objectID": "sim.stabilizer.html",
    "href": "sim.stabilizer.html",
    "title": "CHP Simulator",
    "section": "",
    "text": "StabilizerSimulator\n\n StabilizerSimulator (num_qubits)\n\nThe bare minimum needed for the CHP simulation.\nReference: “Improved Simulation of Stabilizer Circuits” Scott Aaronson and Daniel Gottesman https://arxiv.org/abs/quant-ph/0406196\nOriginal author: Craig Gidney https://github.com/Strilanc/python-chp-stabilizer-simulator"
  },
  {
    "objectID": "math.html",
    "href": "math.html",
    "title": "Math",
    "section": "",
    "text": "comb\n\n comb (n, k)\n\nVectorized combination\n.. math:: comb(n,k) = n! / ((n-k)!k!)\n\n\n\n\nType\nDetails\n\n\n\n\nn\nint or np.array of int\nFirst parameter of combination\n\n\nk\nint or np.array of int\nSecond parameter of combination\n\n\nReturns\nnp.array\nCombination (choose k out of n)\n\n\n\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Example\n  else: warn(msg)\n\n\n\nbinom\n\n binom (k, n, p)\n\nVectorized binomial distribution\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nk\nint or list of int\nSecond parameter of combination\n\n\nn\nint or list of int\nFirst parameter of combination\n\n\np\nfloat or list of float\nProbability\n\n\nReturns\nnp.array\nValue(s) of binomial distribution evaluated at k,n,p.\n\n\n\n\ntest_close(binom(k=[1,2], n=[3,4], p=0.1), [0.243 , 0.0486], eps=1e-05)\n\n\n\n\njoint_binom\n\n joint_binom (k, n, p)\n\nProduct of independent binomial distributions with parameters k, n and same p.\n\n\n\n\nType\nDetails\n\n\n\n\nk\nlist of int\nList of second parameters of combination\n\n\nn\nlist of int\nList of first parameters of combination\n\n\np\nfloat list of float\nProbability\n\n\nReturns\nnp.array\nJoint probability\n\n\n\n\nassert(joint_binom(k=[1,2], n=[3,4], p=[0.1,0.2]) == binom(k=1,n=3,p=0.1) * binom(k=2,n=4,p=0.2))\ntest_close(joint_binom(k=[1,2], n=[2,3], p=[[0.1,0.2],[.3,.4]]), [binom(1,2,0.1)*binom(2,3,0.2), binom(1,2,0.3)*binom(2,3,0.4)])\n\n\n\n\nWilson_var\n\n Wilson_var (p, N)\n\nWilson estimator of binomial variance\nThe formula for the Wilson interval is:\n.. math:: CI = p+z^2/(2n) z/(1 + z^2/n)\nwhich we assume symmetric, s.t. we can extract the std (z=1), thus:\n.. math: Var[p] = (CI/2)^2 = (npq + 0.25) / (1 + n)^2\n\n\n\n\nType\nDetails\n\n\n\n\np\nfloat\nEstimator of probability\n\n\nN\nint\nSample size\n\n\nReturns\nfloat\nEstimated variance of Wilson CI\n\n\n\n\n\n\nWald_var\n\n Wald_var (p, N)\n\nWald estimation of binomial variance\n\n\n\n\nType\nDetails\n\n\n\n\np\nfloat\nEstimator of probability\n\n\nN\nint\nSample size\n\n\nReturns\nfloat\nEstimated variance of Wald CI\n\n\n\n\n\n\nsubset_cards\n\n subset_cards (superset)\n\nCalculate cardinalities of all possible subsets of superset\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsuperset\nset\nInput set\n\n\nReturns\nlist of int\nAll possible cardinalities of subsets\n\n\n\n\nassert(subset_cards({1,2,3}) == {0,1,2,3})\nassert(subset_cards({(0,0), (0,1), (0,2)}) == {0,1,2,3})\n\n\n\n\ncartesian_product\n\n cartesian_product (list_of_sets)\n\nCalculate cartesian product between all members of sets\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nlist_of_sets\nlist\nList of sets between which to calculate Cartesian product\n\n\nReturns\nlist of tuple\nCartesian products\n\n\n\n\nassert(cartesian_product([{1,2},{3,4}]) == [(1,3), (1,4), (2,3), (2,4)])"
  },
  {
    "objectID": "sampler.direct.html",
    "href": "sampler.direct.html",
    "title": "Direct Monte Carlo sampler",
    "section": "",
    "text": "from qsample.examples import ghz3\nfrom qsample.noise import E1, E2\nfrom qsample.sim.stabilizer import StabilizerSimulator as CHP\nfrom qsample.callbacks import *\n\nfrom ipywidgets import interact\nimport ipywidgets as widgets\n\n\ne = E1\n\nsample_range = np.logspace(-3,0,5)\n\nerr_probs = {\n    # \"q1\": 0,\n    \"q\": sample_range\n}\n\nsam = DirectSampler(ghz3, CHP, err_probs=err_probs, err_model=e)\n\nsam.run(1000, callbacks=[PlotStats()])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne = E2\n\nsample_range = np.logspace(-3,0,5)\n\nerr_probs = {\n    \"q2\": sample_range,\n    \"q1\": 0.01\n}\n\nsam = DirectSampler(ghz3, CHP, err_probs=err_probs, err_model=e)\n\nsam.run(1000, callbacks=[PlotStats()])\n\n\ndef get_tree(i):\n    print(\"p_phy=\", list(sam.trees.keys())[i])\n    return (list(sam.trees.values())[i]).draw()\ninteract(get_tree, i=widgets.IntSlider(min=0, max=len(sam.trees)-1, step=1, value=0));\n\n\n\n\n\nsam.save('./test')\n\n\nsam2 = Sampler.load('./test')\nsam2.run(100)"
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "ghz.draw()\n\n\n\n\n\nghz_stabs.draw(scale=1.2)\n\n\n\n\n\neft.draw(scale=1.5)\n\n\n\n\n\nsz_123.draw()\n\n\n\n\n\nmeas7.draw(scale=1.2)\n\n\n\n\n\nnfs.draw(scale=1)"
  },
  {
    "objectID": "examples.html#ghz-repeat-until-success-protocol",
    "href": "examples.html#ghz-repeat-until-success-protocol",
    "title": "Examples",
    "section": "GHZ repeat until success protocol",
    "text": "GHZ repeat until success protocol\n\nRepeat GHZ preparation circuit for a maximum of 3 times.\nOnly repeat if a measurement yields 1, i.e. the flag has been triggered.\nIf we measure in all 3 runs three times 1, count a logical failure.\nIn all other cases the protocol completed without logical failure.\n\n\nghz3.draw(figsize=(6,6))"
  },
  {
    "objectID": "examples.html#ghz-stabilizer-measurement",
    "href": "examples.html#ghz-stabilizer-measurement",
    "title": "Examples",
    "section": "GHZ stabilizer measurement",
    "text": "GHZ stabilizer measurement\n\nPrepare GHZ state with flag measurement 0. (If 1 is measured repeat preparation as often as necessary)\nReset ancilla and measure the stabilizers of the GHZ state (without noise). The stabilizers are:\n\nOne XXXX stab\nand three ZZ stabs\n\nUse syndrom from stabilizer measurements to lookup and perform the correction.\nMeasure stabilizers again.\nNow we have a logical failure if this measurement gives us any syndrome, i.e. if the measurement is anything other than four 0s.\n\n\nghz_stab.draw(figsize=(6,6), legend=True)"
  },
  {
    "objectID": "examples.html#fault-tolerant-color-code-flag-protocol",
    "href": "examples.html#fault-tolerant-color-code-flag-protocol",
    "title": "Examples",
    "section": "Fault-tolerant color code flag protocol",
    "text": "Fault-tolerant color code flag protocol\n\n…\n\n\nftsteane.draw(figsize=(8,6), label_offset=(0,0.15))"
  },
  {
    "objectID": "examples.html#det.-steane-logical-0-preparation-protocol",
    "href": "examples.html#det.-steane-logical-0-preparation-protocol",
    "title": "Examples",
    "section": "Det. Steane logical 0 preparation protocol",
    "text": "Det. Steane logical 0 preparation protocol\n\nsteane0.draw(figsize=(6,6), legend=True)"
  },
  {
    "objectID": "examples.html#flag-stabilizer-protocol",
    "href": "examples.html#flag-stabilizer-protocol",
    "title": "Examples",
    "section": "Flag stabilizer protocol",
    "text": "Flag stabilizer protocol\n\n…\n\n\nflagstab.draw(legend=True, figsize=(15,5))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "qsample",
    "section": "",
    "text": "pip install qsample"
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "qsample",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nThis package requires Python 3.9 or higher.\n\npdflatex (for circuit rendering)"
  },
  {
    "objectID": "index.html#when-to-use",
    "href": "index.html#when-to-use",
    "title": "qsample",
    "section": "When to use",
    "text": "When to use\nThis package is for you if you want to\n* model circuit-level incoherent Pauli noise (we don’t do coherent noise here, neither are our auxiliary qubits modelled as ideal)\n* with high fidelity physical operations aka low physical error rates\n* for a QEC protocol that consists of execution of one or more quantum circuits with in-sequence measurements and feed-forward of measurement information\n* over a specific range of varying physical error rates"
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "qsample",
    "section": "Getting started",
    "text": "Getting started\n\n\nLibrary overview\n\nCircuit\nProtocol\nError Model\nSimulator\nSampler\n5.1. Direct Sampler\n5.2. Interlude: Callbacks\n5.3. Subset Sampler\n\n\n\n1. Circuit\n\nList of ticks\nEach tick is a dictionary, key: gate type, value: set of qubit(s)\nRecommended: 1 gate type per tick\n\nExample: Flagged-GHZ preparation: * Produce GHZ state on qubits 0-3\n* Flag-qubit 4, measure:\n* 0: error-free*\n* 1: flip on one data qubit*\n* Only for max. 1 allowed fault.\n\nfrom qsample import Circuit\n\n\nghz = Circuit([ {\"init\": {0,1,2,3,4}},\n                {\"H\": {0}},\n                {\"CNOT\": {(0,1)}},\n                {\"CNOT\": {(1,2)}},\n                {\"CNOT\": {(2,3)}},\n                {\"CNOT\": {(3,4)}},\n                {\"CNOT\": {(0,4)}},\n                {\"measure\": {4}}], ff_det=True)\n\nff_det: fault-free deterministic. Set to True if circuit gives unique measurement result when executed without faults.\n\nghz.draw()\n\n\n\n\n\n\n2. Protocol\n\nGraph (can be cyclic)\n\nVertices: Circuits\nEdges: transition rules = boolean* functions (checks)\nMust include start and end nodes.\n\n\n* Exception: Correction functions can return circuits for on-the-fly execution. (special case, will not show here)\nExample: Flagged-GHZ repeat(3)-until-success\n* Execute flagged-GHZ circuit max. 3 times.\n* Only repeat if measured 1.\n* If measured flag to be 0 within 3 iteration -> No fail\n* If after 2 iterations 3rd measurement is also 1 -> Fail\n\nfrom qsample import Protocol\n\n\nghz3 = Protocol(fault_tolerant=True)\n\nghz3.add_node('ghz', circuit=ghz) # Add node with corresponding circuit\nghz3.add_edge('START', 'ghz', check='True') # Transition START -> first circuit node always True\nghz3.add_edge('ghz', 'ghz', check='repeat(ghz)') # Transition to ghz if repeat(ghz) True.\nghz3.add_edge('ghz', 'FAIL', check='logErr(ghz)') # Transition to final node FAIL if logErr(ghz) True.\n\nfault_tolerant: Define all weight-1 paths (circuit sequence with max. 1 fault) to never result in a logical fail.\n\nghz3.draw()\n\n\n\n\n\nrepeat() and logErr() are user-defined (boolean) check functions\n\nMeasurement history of circuits stored during for protocol run\n\nCan access measurement history of any circuit by passing its name as argument\n\n\nNext, we define what the two check functions should do:\n\ndef repeat(msmt_list): # arg: list of ghz's measurment history\n    return len(msmt_list) < 3 and msmt_list[-1] == 1 # If True repeat ghz\n\ndef logErr(msmt_list):\n    return len(msmt_list) == 3 and msmt_list[-1] == 1 # If True transition to `FAIL`\n\nfunctions = {'logErr': logErr, 'repeat': repeat}\nghz3._check_fns.update(functions) # Let protocol know about user-defined checks\n\nNote: It is also possible that all checks are false. In this case the protocol exits “insignficantly”.\nHere: “insignificant” when Flag=0 within 3 protocol runs -> Go to next protocol run, i.e. sample.\n\n\n3. Error model\n\nStrategy:\n\nGenerate fault circuit \\(C_f\\) of same length as reference circuit \\(C\\)\n\nDuring simulation iterate \\(C\\) and \\(C_f\\) simulateously and apply to state\n\n\nMust include:\n\ngroup(): group circuit locations by key, e.g. all 1-qubit-gates\n\nselect(): picks certain amount of locations from each group (not required by user)\n\ngenerate(): generator function, returns a Pauli fault operator for given location\n\n\n\nfrom qsample.noise import E1\n\nE1.groups, E1().group(ghz) # All gates in group `q`\n\n(['q'],\n {'q': [(1, 0),\n   (2, (0, 1)),\n   (3, (1, 2)),\n   (4, (2, 3)),\n   (5, (3, 4)),\n   (6, (0, 4))]})\n\n\n\n\n4. Simulator\n\nTwo types available: Stabilizer (CHP) and Statevectors (ProjectQ port), both well-tested\n\nhttps://github.com/Strilanc/python-chp-stabilizer-simulator\nhttps://github.com/ProjectQ-Framework/ProjectQ\n\nStatevector simulator has more available gates and functions\n\n\nfrom qsample import StabilizerSimulator as CHP\n\n\n\n5. Sampler\n\nTwo types: Direct (Monte Carlo) and Subset sampler\nAll relevant information stored in CountTree data structure\n\n\n\n5.1. Direct sampler\n\nfrom qsample import DirectSampler\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nLet’s define some physical error rates at which to sample:\n\nsample_range = np.logspace(-3,0,5)\nerr_probs = {'q': sample_range} # Note: Must provide rate(s) for each group specified in `ErrorModel`\nerr_probs\n\n{'q': array([0.001     , 0.00562341, 0.03162278, 0.17782794, 1.        ])}\n\n\n\ndsam = DirectSampler(protocol=ghz3, simulator=CHP, err_probs=err_probs, err_model=E1)\ndsam.run(10000)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np_L, std = dsam.stats()\n\nplt.errorbar(sample_range, p_L, fmt='--', c=\"black\", yerr=std, label=\"Direct MC\")\nplt.plot(sample_range, sample_range,'k:', alpha=0.5)\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel('$p_{phy}$(q)')\nplt.ylabel('$p_L$');\n\n\n\n\nCheck what has been sampled for the last (1e0) physical error rate:\n\ndsam.trees[(1.0,)].draw()\n\n\n\n\n\n\n5.2. Interlude: Callbacks\n\nUsed to receive intermediate results inside sampling process\nE.g. we might want to avoid unnecessary samples (at large \\(p_{phy}\\))\n\nWe can use the callback RelStdTarget\n\n\n\nfrom qsample import callbacks as cb\n\ndsam2 = DirectSampler(protocol=ghz3, simulator=CHP, err_probs=err_probs, err_model=E1)\ndsam2.run(10000, callbacks=[cb.RelStdTarget(target=0.2)])\n\n\n\n\n\n\n\n\n\n\n\n\n\nRel. std target of 0.2 reached. Sampling stopped.\n\n\n\n\n\nRel. std target of 0.2 reached. Sampling stopped.\n\n\nAnother callback is VerboseCircuitExec, which gives a detailed log of which circuits, faults and measurements took place:\n\ndsam3 = DirectSampler(protocol=ghz3, simulator=CHP, err_probs={'q': 0.1}, err_model=E1)\ndsam3.run(10, callbacks=[cb.VerboseCircuitExec()])\n\n\n\n\nghz -> Faults: [] -> Msmt: 0\nNone\nghz -> Faults: [(3, {'X': {1, 2}})] -> Msmt: 1\nghz -> Faults: [(2, {'Z': {0}, 'Y': {1}})] -> Msmt: 1\nghz -> Faults: [] -> Msmt: 0\nNone\nghz -> Faults: [] -> Msmt: 0\nNone\nghz -> Faults: [(2, {'Z': {1}}), (6, {'Y': {0}})] -> Msmt: 0\nNone\nghz -> Faults: [] -> Msmt: 0\nNone\nghz -> Faults: [(3, {'Z': {1}, 'Y': {2}}), (5, {'Z': {4}})] -> Msmt: 1\nghz -> Faults: [(2, {'Z': {0}, 'X': {1}})] -> Msmt: 1\nghz -> Faults: [(5, {'Y': {3, 4}})] -> Msmt: 1\nFAIL\nghz -> Faults: [(4, {'X': {3}}), (6, {'X': {0}})] -> Msmt: 1\nghz -> Faults: [] -> Msmt: 0\nNone\nghz -> Faults: [] -> Msmt: 0\nNone\nghz -> Faults: [] -> Msmt: 0\nNone\nghz -> Faults: [(3, {'X': {1}, 'Z': {2}}), (4, {'X': {2, 3}})] -> Msmt: 1\nghz -> Faults: [(3, {'Y': {1, 2}})] -> Msmt: 1\nghz -> Faults: [(6, {'X': {4}})] -> Msmt: 1\nFAIL\n\n\nWe can also write our own callback. Every sampler has 6 callback hooks:\n* Begin/End sampler\n* Begin/End protocol\n* Begin/End circuit\n\n\n5.3. Subset Sampler\n\nSamples only at one physical error rate pmax\nScaling obtained analytically\npmax must be chosen in “representative” region\n\nNote: 1. For multi-parameter error model pmax is a tuple of one physical error rate per group.\n2. The choice of pmax has a direct impact of which subsets are sampled.\nHow to choose pmax? What is the heuristic?\n* We want to sample, s.t. the subset occurence probability is max. for 0-weight subset and subsequently falling for higher order subsets.\n* We want to have also relatively high probability for other (important) subsets, i.e. weight-1, weight-2,..\nExample: For the Flagged-GHZ circuit we would choose a pmax close to 0.1:\n\nfrom qsample.sampler.base import subset_occurence, all_subsets, err_probs_tomatrix\n\ngrp = E1().group(ghz).values()\nwgts_combis = all_subsets(grp)\n\nfor p_phy in [0.01, 0.1, 0.3]:\n    Aws = subset_occurence(grp, wgts_combis, p_phy)\n    plt.figure()\n    plt.title(\"Subset occurence prob. $A_w$ at $p_{phy}$=%.2f\" % p_phy)\n    plt.bar(range(len(Aws)), Aws)\n    plt.ylabel(\"$A_w$\")\n    plt.xlabel(\"Subsets\")\n\n\n\n\n\n\n\n\n\n\n\nfrom qsample import SubsetSampler\n\n\npmax = {'q': 0.1}\n\nss_sam = SubsetSampler(ghz3, CHP,  pmax=pmax, err_probs=err_probs, err_model=E1)\nss_sam.run(300)\n\n\n\n\nNote: Although we passed err_probs those are not used for sampling. Only when we call stats() those probs are used:\n\np_L_low, std_low, p_L_up, std_up = ss_sam.stats()\n\nplt.errorbar(sample_range, p_L, fmt='--', c=\"black\", yerr=std, label=\"Direct MC\")\nplt.loglog(sample_range, p_L_low, label='SS low')\nplt.fill_between(sample_range, p_L_low - std_low, p_L_low + std_low, alpha=0.2)\nplt.loglog(sample_range, p_L_up, label='SS low')\nplt.fill_between(sample_range, p_L_up - std_up, p_L_up + std_up, alpha=0.2)\nplt.plot(sample_range, sample_range,'k:', alpha=0.5)\nplt.xlabel('$p_{phy}$(q)')\nplt.ylabel('$p_L$')\nplt.legend();\n\n\n\n\nWe sampled at a single error rate with much less samples and get a much better bound on the logical error rate. Let’s inspect what has been sampled:\n\nss_sam.tree.draw() # only one tree\n\n\n\n\nWe can store and later reload our sample results:\n\nss_sam.save('ghz3ss.samp')\n\nfrom qsample import Sampler\nstored_sam = Sampler.load('ghz3ss.samp')\ncounts_before = stored_sam.tree.root.counts\n\nstored_sam.run(200) # After loading we can for example run a few more samples.\ncounts_after = stored_sam.tree.root.counts\n\nprint(counts_before, counts_after)\n\nImportError: cannot import name 'Sampler' from 'qsample' (/home/dw/Desktop/HiWi/qsample/qsample/__init__.py)\n\n\nMore complex examples can be found here: https://github.com/dpwinter/qsample/blob/master/08_examples.ipynb"
  },
  {
    "objectID": "index.html#contribute",
    "href": "index.html#contribute",
    "title": "qsample",
    "section": "Contribute",
    "text": "Contribute\n\nsubmit your feature request via github issue"
  },
  {
    "objectID": "index.html#team",
    "href": "index.html#team",
    "title": "qsample",
    "section": "Team",
    "text": "Team\nqsample was developed by Don Winter based on and in collaboration with Sascha Heußen under supervision of Prof. Dr. Markus Müller."
  },
  {
    "objectID": "sampler.base.html",
    "href": "sampler.base.html",
    "title": "Sampler base class",
    "section": "",
    "text": "Definitions: * A circuit location (cloc) is a tuple (tick_index,qubit(s)) which specifies a location in a circuit. In the simplest case this tuple can be understood as a Euclidean coordinate in tick-qubit-space, for example (1,2) for a circuit element at tick 1 on qubit 2, for example a single-qubit gate. However, the second entry in the tuple can also be a tuple of qubits, i.e. (tick_index, (qubitA, qubitB)), for example (1,(2,3)) for a 2-qubit gate in tick 1 from qubit 2 (control) to qubit 3 (target). It is important that (1,(2,3)) \\(\\neq\\) (1,(3,2)) \\(\\neq\\) (1,2)+(1,3). * Common circuit locations can be grouped into a location group (locgrp), for example the set of all 1-qubit gate locations or the set of all idle qubits or all neighboring qubits of 1-qubit gates. A location group is defined by the error model, which sweeps through a circuit and extracts all elements belonging to a certain group. Note that circuit locations can appear in more than one location group and the union of all location groups must not necessarily give all possible circuit locations. This is for example the case for error models which only define errors on gates but not on idle qubits. * By location group weight (locgrp_wgt) we refer to an integer number specifying the amount of location group elements on which to place faults. Note that the weight only specifies the amount, neither the specific element on which the fault is placed (this will be choosen uniformly random) nor the specific error which will be placed (this will be drawn uniformly random from a set of group errors (locgrp_errsets) defined by the error model). * By location group probability (locgrp_prob) on the other hand, we refer to the probability of placing faults on each element of a group. Thus, during circuit execution it will be decided for each element of a location group if an error is placed based on the group probability. * Both the above can be written as vectors over all location groups an error model specifies. The vector of location group weights (locgrp_wgts) thereby characterizes a so-called fault-weight subset, i.e. a particular amount of faults on each location group defined in an error model. These subsets form the sampling space on which we apply importance sampling during subset sampling. * For subset sampling we analytically calculate the subset occurence probability (Aws) as a function of location group probabilities locgrp_probsfor each location group. As a subset occurence probability results from a binomial distribution binom(locgrp_wts, locgrp_lens, locgrp_probs) we also refer to it as binomial weight of a subset, or simply \\(A_w\\), as this is the symbol used in the paper. * If one of the above quantities is preceeded by a protocol_ we have a dictionary with circuit ids (cids) as keys and the given quantity for a circuit as value. Note that locgrp_probs are defined equally for each circuit in the protocol as those represent physical error rates of a (faulty) device which also won’t be different for different circuits in reality. To sample from more than physical error rate a range locgrp_probs_range can be specified which contains a range of error rates for each location group. * locgrp_wgts_combis are all possible locgrp_wgts vectors up to the total number of elements (locgrp_len) in each location group.\n\n\nprotocol_subset_occurence\n\n protocol_subset_occurence (protocol_groups:dict, protocol_subsets:dict,\n                            group_probs:dict)\n\nCalculate all subset occurences for each circuit.\n\n\n\nprotocol_all_subsets\n\n protocol_all_subsets (protocol_groups:dict)\n\nCalculate all possible subset tuples for each circuit.\n\n\n\nall_subsets\n\n all_subsets (groups:list)\n\nCalculate all possible subset tuples from list of lists containing group elements for each group.\n\n\n\nsubset_occurence\n\n subset_occurence (groups:list, subsets:<built-infunctionarray>,\n                   group_prob_range:<built-infunctionarray>)\n\nCalculate matrix of subset occurences, Aws.\n\n\n\nsort_by_list\n\n sort_by_list (d:dict, l:list)\n\nSort dictionary keys by order of keys in list.\n\n\n\nerr_probs_tomatrix\n\n err_probs_tomatrix (err_probs:dict, groups:list)\n\nConvert dict of error probabilities into matrix of dimensions (error probability)x(circuit location group).\n\n\n\nequalize_lens\n\n equalize_lens (mixed_list:list)\n\nConvert mixed list of lists and elements to list of lists, s.t. each sublist has the same length as the longest sublist.\n/home/dw/.local/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Attributes\n  else: warn(msg)\n\n\n\nSampler\n\n Sampler (protocol, simulator, err_probs={'0': {}}, err_model=None)\n\nBase class for other Sampler classes to inherit"
  },
  {
    "objectID": "callbacks.html",
    "href": "callbacks.html",
    "title": "Sampler Callbacks",
    "section": "",
    "text": "CallbackList\n\n CallbackList (sampler, callbacks=[])\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nCallback\n\n Callback ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nPlotStats\n\n PlotStats ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nRelStdTarget\n\n RelStdTarget (target=0.1, include_delta=True)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nStatsPerSample\n\n StatsPerSample (log_dir=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nVerboseCircuitExec\n\n VerboseCircuitExec ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nErvPerSample\n\n ErvPerSample (log_dir=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nPathProducts\n\n PathProducts (log_dir=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nSubsetRates\n\n SubsetRates (log_dir=None)\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "sampler.subset.html",
    "href": "sampler.subset.html",
    "title": "Subset Monte Carlo sampler",
    "section": "",
    "text": "# class SubsetSampler(Sampler):\n        \n#     def stats(self, err_probs=None):\n#         _protocol_Aws = self.tree.constants\n        \n#         if set(self.protocol._circuits.keys()) != set(self.protocol_subsets.keys()):\n#             # Update subsets if circuits were added during runtime.\n#             self._set_subsets()\n        \n#         if err_probs is not None:\n#             assert isinstance(err_probs, dict)\n#             err_probs = err_probs_tomatrix(err_probs, self.err_model.groups)\n#             self.tree.constants = protocol_subset_occurence(self.protocol_groups, self.protocol_subsets, err_probs)\n#         else:\n#             self.tree.constants = protocol_subset_occurence(self.protocol_groups, self.protocol_subsets, self.err_probs)\n        \n#         v_L = self.tree.uncertainty_propagated_variance(mode=1)\n#         p_L = self.tree.path_sum(self.tree.root, mode=1)\n#         delta = 1 - self.tree.path_sum(self.tree.root, mode=2)\n#         v_L_up_var = self.tree.uncertainty_propagated_variance(mode=0)\n        \n#         self.tree.constants = _protocol_Aws\n#         return equalize_lens([p_L, np.sqrt(v_L), p_L+delta, np.sqrt(v_L_up_var)])\n        \n#     def __init__(self, protocol, simulator, pmax, err_model=None, err_probs=None):\n#         super().__init__(protocol, simulator, err_probs=pmax, err_model=err_model)\n#         probs = err_probs if err_probs else pmax\n#         self.err_probs = err_probs_tomatrix(probs, self.err_model.groups)\n        \n#     def optimize(self, tree_node, circuit, prob_vec):\n        \n#         subsets, Aws = zip(*self.tree.constants[circuit.id].items())\n#         if circuit._ff_det and subsets[0] in {n.name for n in tree_node.children}: \n#             Aws = np.ma.masked_array(Aws)\n#             Aws[0] = np.ma.masked\n#         subset = subsets[ np.random.choice(len(subsets), p=Aws) ]\n        \n#         locgrps = self.protocol_groups[circuit.id]\n#         flocs = self.err_model.choose_w(locgrps, subset)\n#         return {'subset': subset, 'flocs': flocs}\n    \n#     @property\n#     def tree(self):\n#         return list(self.trees.values())[0]\n\n\nfrom qsample.examples import ghz_stab\nfrom qsample.noise import E1\nimport qsample.callbacks as cb\nfrom qsample.sim.stabilizer import StabilizerSimulator as CHP\nimport numpy as np\n\n\nfrom qsample.noise import E3\nfrom qsample.examples import ghz3\n\nsample_range = np.logspace(-3,0,5)\n\np_max = {\n    \"q1\": 0.1,\n    \"q2\": 0.1, \n    \"meas\": 0.1,\n    \"idle\": 0.01,\n    \"init\": 0.01\n}\nerr_params = {\n    'q1': 0,\n    'q2': sample_range,\n    'meas': sample_range * 0.1,\n    'idle': sample_range * 0.01,\n    'init':sample_range * 0.001\n}\n\nss_sam = SubsetSampler(ghz3, CHP, p_max=p_max, err_params=err_params, err_model=E3)\nss_sam.run(400, [cb.PlotStats()])"
  }
]